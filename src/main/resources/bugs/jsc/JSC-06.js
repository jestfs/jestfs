! async function * x ( ... x ) { } ;
! async function * x ( x , ... [ ] ) { } ;
! async function * x ( x , [ ] ) { } ;
! async function * x ( x , [ ] = 0 ) { } ( ) ;
! async function * x ( x = 0 ) { var x ; } ( ) ;
! async function * x ( x = class extends 0 { } ) { } ( ) ;
! async function x ( ... x ) { } ;
! async function x ( [ ] , ... x ) { } ;
! async function x ( x , ... [ ] ) { } ;
! async function x ( x , [ ] ) { } ;
! async function x ( x , [ ] = 0 ) { } ;
! async function x ( x = 0 ) { } ;
! class x extends function * x ( [ x , ] ) { } ( ) { } ;
! function * x ( ... x ) { } ;
! function * x ( [ ] , ... x ) { } ;
! function * x ( x , ... [ ] ) { } ;
! function * x ( x , [ ] ) { } ;
! function * x ( x , [ ] = 0 ) { } ;
! function * x ( x = 0 ) { } ;
! function * x ( x = 0 , await ) { } ;
! function x ( ... x ) { } ;
! function x ( [ ] , ... x ) { } ;
! function x ( [ ] = 0 , x ) { } ;
! function x ( x , ... [ ] ) { } ;
! function x ( x , [ ] ) { } ;
! function x ( x , [ ] = 0 ) { } ;
! function x ( x = 0 ) { } ;
0 % new async function x ( [ ] = 0 , x ) { } ( ) ** 0 ;
0 & 0 [ async function * x ( [ , ... x ] ) { } ( ) `` ] ;
0 & 0 [ async function * x ( [ ... x ] ) { } ( ) `` ] ;
0 & 0 [ async function * x ( [ ] , x ) { } ( ) ] ;
0 & 0 [ async function * x ( [ x , ] ) { } ( ) `` ] ;
0 & new function x ( ) { return { [ Symbol . toPrimitive ] : async function * x ( x , [ ] , ) { } } > 0 ; } ( ) ;
0 ?. x ( 0 , function x ( [ ] , ... x ) { } ( ) , ) ;
Array . from . call ( function x ( [ ] , ... x ) { } , 0 ) ;
Array . from . call ( function x ( [ ] , ... x ) { } , `` ) ;
[ , 0 >= { } + { [ Symbol . toPrimitive ] : async function * x ( x , [ ] ) { } } ] ;
[ 0 , , 0 << async function x ( ... x ) { } [ 0 ] ] ;
[ 0 , { [ Symbol . toPrimitive ] : function x ( [ ] = 0 , x , ) { } } ^ 0 ] ;
`${ 0 }${ + '' }${ { [ Symbol . toPrimitive ] : async function * x ( x , [ ] , ) { } } }` ;
`${ 0 }${ 0 }${ { [ Symbol . toPrimitive ] : function * x ( x , [ ] = 0 ) { } } + 0 }` ;
async function x ( ) { } for ( x ; x instanceof 0 [ { [ Symbol . toPrimitive ] : async function * x ( x = 0 ) { } } ] -- ; ) ;
class x { static 0 = super [ { [ Symbol . toPrimitive ] : async function * x ( [ ] , x , ) { } } ] ; } 
for ( ; async function x ( [ x , ] ) { } ( ) ( ) ; 0 ) ;
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * x = yield * { [ Symbol . iterator ] : async function * x ( { ... x } ) { } } ; } } , ] ) ;
for ( [ ] in function * x ( [ ] = 0 , x ) { } ) ;
for ( var x in function * ( ) { } ( ) [ async function * x ( ... x ) { } . x ] ) ;
for ( var { } of { [ Symbol . iterator ] : async function * x ( ) { return yield * yield * [ ! 0 , ] [ 0 ] /= 0 ; } } ) ;
for ( var { } of { [ Symbol . iterator ] : async function * x ( ) { return yield * yield * [ ! 0 , ] [ 0 ] /= 1 ; } } ) ;
for ( var { } of { [ Symbol . iterator ] : async function * x ( ) { return yield * yield * [ ! 0 , ] [ 0 ] ^= 0 ; } } ) ;
for ( var { } of { [ Symbol . iterator ] : async function * x ( ) { return yield * yield * [ ! 1 , ] [ 0 ] /= 0 ; } } ) ;
for ( var { } of { [ Symbol . iterator ] : async function * x ( ) { return yield * yield * [ 0 == 0 , ] [ 0 ] |= 1 ; } } ) ;
for ( x in function * x ( [ ] , x ) { } ( ) ) ;
let [ ] = async function * x ( { x , } = 0 ) { var x ; function x ( ) { } } ( ) ;
let [ ] = async function * x ( { x , } = x ) { } ( ) ;
let [ ] = new function x ( { x } ) { } | 0 , x ;
let [ ] = ~ async function * x ( ... { x } ) { } ( ) [ 0 !== 0 . x ] ;
let [ ] = ~ async function * x ( ... { x } ) { } ( ) [ 0 >> '' . x ] ;
let [ ] = ~ async function * x ( ... { x } ) { } ( ) [ 0 >> [ 0 ] . x ] ;
let [ ] = ~ async function * x ( ... { x } ) { } ( ) [ 0 >> null . x ] ;
let [ ] = ~ async function * x ( ... { x } ) { } ( ) [ false >> 0 ] ;
let [ ] = ~ function * x ( [ ] = 0 , x , [ ] ) { } ( ) ;
let [ ] = ~ function * x ( [ ] = `` , x , [ ] ) { } ( ) ;
let x = async function * x ( [ , [ ] , ... x ] ) { } ( ) ;
let x = function * x ( ... x ) { } ( 0 ) . x = 0 ;
let x = function * x ( { x } ) { } ( 0 ) . x = 0 ;
new async function * x ( [ ] , ... x ) { } ;
new async function * x ( [ ] , x = 0 ) { } ;
new async function * x ( [ ] = 0 , x ) { } ;
new async function * x ( x = 0 ) { } ;
new async function x ( x , { } ) { } ;
new class extends function x ( x = 0 , ... [ ] ) { return ; } { } ;
new class extends function x ( x = await , ... [ ] ) { } { } ;
new function ( ) { return { [ Symbol . toPrimitive ] : function x ( ... x ) { } } & 1 ; } ;
new function * x ( [ ] , x ) { } ;
new function * x ( x , [ ] = 0 ) { } ;
new function x ( [ ] = '' . x ( ) , x ) { } ;
new function x ( [ ] = 0 ( 0 , ... 0 ) , x ) { } ;
new function x ( [ ] = 0 , x ) { } ;
new function x ( [ ] = [ ] . x ( ) , x ) { } ;
new function x ( [ ] = [ ] [ 0 ] , x ) { } ;
new function x ( [ ] = `${ 0 }${ 0 }` [ 0 ] , x ) { } ;
new function x ( [ ] = `` [ 0 ] , x ) { } ;
new function x ( [ ] = `` [ { index : 0 } ] , x ) { } ;
new function x ( [ ] = async function * ( ) { } ( ) . x . x , x ) { } ;
new function x ( [ ] = function ( ) { } ( ) . x . x , x ) { } ;
new function x ( [ ] = function * ( ) { } ( ) . x . x , x ) { } ;
new function x ( [ ] = new . target ( ) , x ) { } ;
new function x ( [ ] = new new . target ( 0 ) ( ) , x ) { } ;
new function x ( [ ] = new new . target ( 0 ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( 0 . x . x `` ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( [ 0 ] ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( `` ) ( ) , x ) { } ;
new function x ( [ ] = new new . target ( new . target ) . x ( ) , x ) { } ;
new function x ( [ ] = null . x ( ) , x ) { } ;
new function x ( [ ] = this [ 0 ] , x ) { } ;
new function x ( [ ] = true . x ( ) , x ) { } ;
new function x ( [ ] = true [ 0 ] , x ) { } ;
new function x ( [ ] = x ( ) , x ) { } ;
new function x ( [ ] = { [ Symbol . toPrimitive ] : '' } / 0 ** 0 , x ) { } ;
new function x ( x , ... [ [ ] , ... [ ] ] ) { } ( 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , `` && 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , class x extends 0 { } ) ;
new function x ( x , ... await ) { } ( 0 ) ;
new function x ( x , ... await ) { } ( 0 , 0 ) ;
new function x ( x , [ ] ) { } ;
new function x ( x = 0 ) { var await ; } ; 
new function x ( x = 0 ) { var x , x ; } ; 
new function x ( x = 0 ) { var x ; } ; 
new function x ( x = 0 , ... [ ] ) { } ( 0 ) ;
new function x ( x = x => new . target ) { x ( 0 ) ; } ; 
new function x ( { 0 : x , } ) { } ( null <= 0 ** ~ 0 ) ;
new function x ( { 0 : x , } ) { } ( null <= { [ Symbol . toPrimitive ] : 0 || 0 } ) ;
new function x ( { 0 : x , } ) { } ( null <= { [ Symbol . toPrimitive ] : x => 0 < 0 } ) ;
new function x ( { 0 : x , } ) { } ( null <= { [ Symbol . toPrimitive ] : x => [ ] } ) ;
new function x ( { 0 : x , } ) { } ( { [ Symbol . toPrimitive ] : null } <= this ) ;
switch ( 0 ) { case new function x ( [ ] , ... x ) { } : default : }
switch ( [ ] ) { case function x ( [ ] , x , [ ] , [ ] ) { } : }
switch ( [ ] ) { case function x ( [ ] = 0 , x , [ ] , [ ] ) { } : }
typeof async function x ( [ ] = 0 , x ) { } ? 0 : 0 ;
var x = async function * x ( [ ] , x = 0 ) { } ;
var x = async function * x ( [ ] = 0 , x ) { } ;
var x = async x => [ ] . x ??= async function x ( ... x ) { } ; x ( ) ;
while ( [ function * x ( x = 0 ) { } ?. x < 0 ] [ 0 ] -- - 0 ) ;
