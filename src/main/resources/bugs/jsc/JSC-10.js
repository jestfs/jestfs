let x = async x => { for await ( { x , } of [ 0 ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x = 0 , x } of [ 0 ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x , } of [ 0n ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x , } of [ [ ] ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x } of [ `` ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x } of [ true ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x } of [ 0n ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x } of [ `` ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ 0 ] ) for ( 0 [ 0 , 0 ] in 0 ? 0 : 0 ) return 0 ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ true ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x , } of [ `` ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x } of [ 0 ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x } of [ true ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ 0 ] ) for ( let x in 0 ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x , } of [ true ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x } of [ 0n ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x } of [ [ ] ] ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x } of [ { } ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ { } ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ '' ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x } of [ 0 ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ 1n ] ) ; } ; x ( ) ; 
let x = async x => { for await ( { x , } of [ 0 ] ) for ( 0 [ 0 , 0 ] in x => 0 ) ; } ; x ( ) ; 
var x = async x => { ; for await ( { x , } of [ 0 ] ) ; } ; x ( ) ; 
