! ! + void await < 0 ; 
! await ; 
! await >= 1 ; 
! class { [ 0 . x ??= await ] ; } ; 
! function ( ) { } ( ) [ 0 [ 0 ] ||= await = 0 ] `` ; 
! function ( ) { } ( ) [ 0 || await ] ; 
'' == await ? 0 : 0 ; class await { } 
'' [ ( 0 << await ) ] ; 
( 1n ? await : 0 ) ; 
( await ) ; 
( await ) ; async function * await ( ) { } 
( await => 0 ) ( ) ; 
( await => [ , ] = 0 ) ( ) ; 
( await => await ) ( ) ;
( await => { } ) ( ) ; 
+ await ; 
+ await ?. x & 0 ; 
+ function ( ) { } ( ) [ 0 - await ] ; 
+ function ( ) { } ( ) [ 1 !== await ] & 0 ; 
+ function ( ) { } ( ) [ await & 0 ] ; 
+ function ( ) { } ( ) [ await >> new 0 ] ; 
+ ~ await ?. x ; 
- [ ! await , ] ; 
- await ; 
- { ... + await } ; 
- { ... 0 [ await ] } ; 
- { ... await !== 0 } ; 
- { ... await . x ||= 0 } ; 
- { ... await } ; 
- { ... void await } ; 
- { 1 : - await } ; 
- { 1 : await &&= 0 } ; 
- { 1 : await ? 0 : new 0 } ; 
- { 1 : await ?. x } ; 
- { 1 : await } ; 
- { [ 0 | await ] : 0 } ; 
- { [ await >>> 0 ] : 0 } ; 
- { [ await ] : 0 } ; 
0 != 0 == await === 0 ; 
0 != await == 0 === 0 ; 
0 !== ! await ; 
0 !== await in { } ; 
0 !== await || 0 ; 
0 % + - await -- ; 
0 % await ( ) ; 
0 & - await ?. x ; 
0 & 0 [ { [ Symbol . toPrimitive ] : await => 0 } ] ; 
0 & `${ await &&= 0 }` ; 
0 & `${ await ++ != 0 }` ; 
0 & await ++ ; 
0 & await . x ++ ; 
0 & await ; 
0 & await ?? 0 ; 
0 & function * ( ) { } ( ) [ await ] ; 
0 & new 0 ( 0 , ... await &&= 0 ) ; 
0 & { ... await ++ , } ; 
0 & { 0 : 0 . x %= await } ; 
0 && 0 || 0 === 0 && await ; 
0 ( ... 0 || await ) ; 
0 ( ... await ) ; 
0 ( ... await ? 0 : 0 ) ; class await { } 
0 ( ... null ?? await ) ; 
0 ( 0 , ... 0 [ 0 ] ||= await ) ; 
0 ( 0 , ... await ) ; 
0 ( 0 , ... await = 0 ) ; 
0 ( 0 , ... await = async function x ( ) { } ) ; 
0 ( 0 , ... { } . x ??= await ) ; 
0 ** `${ await }` ; 
0 ** await != 0 ; 
0 + await ; 
0 - await , 0 ; 
0 - await ; 
0 . x %= await ?. ( ) , 0 ; 
0 . x *= 0 ** await ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => 0 } ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => this } ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => x } ; 
0 . x *= 0 . x ||= await ; 
0 . x *= 0 [ 0 ] **= await -- ; 
0 . x *= await !== 0 ; 
0 . x *= await >> 0 ; 
0 . x *= await ? 0 : 0 ; 
0 . x = ! 0 && await ; 
0 . x = await !== 0 ; 
0 . x ??= ! await ; 
0 . x ??= 1n ? await : 0 ; 
0 . x ??= [ ] [ 0 ] ??= await ?. x ( ) ; 
0 . x ??= typeof await ; 
0 . x ??= void await ; 
0 . x ||= 1 && await ; 
0 . x ||= await ?. x ; 
0 . x ||= await ?. x ?. x ; 
0 / await ; 
0 / await ; class await { } 
0 < 0 < + await >>> 0 << 0 <= 0 && 0 ; 
0 < await ; 
0 < await ?. x ; 
0 << + ! await ?? 0 ; 
0 << 0 [ await ] ; 
0 << await ; 
0 << await ?. x ; 
0 <= await , 0 ; 
0 <= await . x `` << 0 ; 
0 <= await ; 
0 <= function ( ) { } ( ) [ await ] ; 
0 <= { [ Symbol . toPrimitive ] : await => 0 } != 0 ; 
0 <= ~ await ; 
0 == await ; 
0 === await ; 
0 === await === 0 ; 
0 === await >>> 0 ; 
0 > 0 - await ?. x ; 
0 > [ await , , ] ; 
0 > await , 0 ; 
0 > await ; 
0 >> await , 0 ; 
0 >> await ; 
0 >> await in 0 ; 
0 >>> 0 [ await ] ; 
0 >>> await , 0 ; 
0 >>> await ; 
0 >>> void await ; 
0 ? 0 : ! await ; 
0 ? 0 : 1 && await ; 
0 ? 0 : await >> 0 ; 
0 ?. ( ... 0 ?. x == void await ) ; 
0 ?. ( ... await <= 0 ) ; 
0 ?. ( 0 , ... 0 >= await ) ; 
0 ?. ( 0 , ... function ( ) { } ( ) [ `` [ 0 ] ??= await ] ??= 0 , ) ; 
0 ?. ( 0 , 0 & await ) ; 
0 ?. ( 0 , await ) ; 
0 ?. ( 0 , void await ) ; 
0 ?. ( await ) ; 
0 ?. ( await / 0 ) ; 
0 ?. ( await = 0 ) ; 
0 ?. ( await = async x => { } , x ) ; 
0 ?. [ 0 <= await ] ; 
0 ?. [ await ** 0 ] ; 
0 ?. [ await ++ ] . x ; 
0 ?. [ await . x ] ; 
0 ?. [ await >= 0 ] ; 
0 ?. [ await ? 0 : 0 ] ; 
0 ?. [ await ?? 0 ] ; 
0 ?. [ await ] ; 
0 ?. [ await ] [ 0 ] ; 
0 ?. [ await ||= 0 ] ; 
0 ?. [ void await ] [ 0 ] ; 
0 ?. x ( 0 , ... - await , ) ; 
0 ?. x ( 0 , ... await !== - 0 , ) ; 
0 ?. x ( delete ++ await . x , ) ; 
0 ?. x [ 0 . x = await ] ; 
0 ?. x [ 0 . x ?? await ] ; 
0 ?. x [ 0 . x ||= await ] ; 
0 ?. x [ 0 ^ await ] ; 
0 ?. x [ 0 in await ] ; 
0 ?. x [ 0 || await ] ; 
0 ?. x [ [ await ] ] ; 
0 ?. x [ await & 0 ] ; 
0 ?. x [ await ??= 0 ] ; 
0 ?. x [ await ] ; 
0 ?. x [ await ] [ 0 ] ; 
0 ?. x [ await ||= 0 ] ; 
0 [ 0 . x %= await ] ; 
0 [ 0 ] ??= 0 . x ||= await ; 
0 [ 0 ] ??= true && await ; class await { } 
0 [ await & 0 ] ; 
0 [ await ? 0 : 0 ] ??= 0 ; 
0 [ await ] ; 
0 ^ + await ; 
0 ^ await ++ > 0 ; 
0 ^ { [ Symbol . toPrimitive ] : await => 0 } << 1n >>> 0 ; 
0 ^ { } << { [ Symbol . toPrimitive ] : await => new 0 ( ) } ; 
0 ^ ~ -- await ; 
0 in await . x ; 
0 in await in 0 ; 
0 instanceof await != 0 ; 
0 instanceof await in 0 ; 
0 | await & 0 ; 
0 | function ( ) { } ( ) [ - await ] ; 
0 | function ( ) { } ( ) [ await ] ; 
0 || 0 | await ; 
0 || await ; 
1 ** + await ; 
1 ? await . x : 0 ; 
1n . x ?? await ?? 0 ; 
1n << ~ ~ await ; 
1n ?. x [ await ] . x ; 
; 0 | 0 >>> await ; 
Array . prototype . reduce . call ( { length : { [ Symbol . toPrimitive ] : await => x } } ) ;
Object . getOwnPropertyNames . call ( 0 , 0 === 0 ^ 0 || 0 ? await : 0 ) ; 
[ ! await ++ ] ; 
[ , ! 0 / { [ Symbol . toPrimitive ] : await => 0 } ] ; 
[ , ++ await ] ; 
[ , 0 == 0 !== await , 0 ] ; 
[ , 0 || new `${ 0 }${ await }` . x ] ; 
[ , ] = { [ Symbol . iterator ] : await => x } ;
[ , `${ 0 }` [ 0 ] &&= 0 . x ? 0 : await ] ; 
[ , `${ 0 }` [ 0 ] &&= 0 . x || await ] ; 
[ , `${ 0 }` [ 0 ] &&= null || await ] ; 
[ , `${ 0 }` [ 0 ] &&= typeof await ] ; 
[ , await %= 0 ] ; 
[ , await ++ ** ~ 0 * 1 ] ; 
[ , await ] ; 
[ , null ?? await ] ; 
[ , { [ Symbol . toPrimitive ] : await => 0 } >= 1 >= 0 ] ; 
[ ... 0 - await ] ; 
[ ... await . x &&= 0 ] ; 
[ ... await . x = 0 ] ; 
[ ... await ] ; 
[ ... void await != 0 >= 0 ] ; 
[ 0 , + 1 && await ] ; 
[ 0 , , 0 . x %= await ( ) ] ; 
[ 0 , , 0 >>> await ] ; 
[ 0 , , [ await , , ] ] ; 
[ 0 , , await -- ] ; 
[ 0 , , await ] ; 
[ 0 , , await ] ; async function await ( ) { } 
[ 0 , , function * ( ) { } ( ) ( 0 , await ) ] ; 
[ 0 , , function * ( ) { } ( ) ( 0 , await ) ] ; function * await ( ) { } 
[ 0 , 0 || await ] ; 
[ 0 , await !== 0 == 0 ] ; 
[ 0 , await ++ && 0 ] ; 
[ 0 , await ] ; 
[ 0 || { [ 0 in await ] : 0 , } > 0 == 0 >= 0 ] ; 
[ 1 && await , , 0 ] ; 
[ 1 , ] [ 0 ] &&= await << 0 ; 
[ 1 , ] [ 0 ] &&= await >> 0 ; 
[ [ ] === ! await ] ; 
[ [ ] [ await ||= 0 ] = 0 ] ; 
[ ] = { [ Symbol . iterator ] : await => x } ;
[ `${ await }` ] ; 
[ await , ] && 0 ; 
[ await , ] / 0 ; 
[ await ?. x , , 0 , ] ; 
[ await ?. x || x ] ; 
[ await ] - 0 ; 
[ await ] ; 
[ await instanceof 0 < 0 , 0 ] ; 
[ new 0 ( await -- ) , ] ; var x ; 
[ this . x ||= await ] ; 
[ void function ( ) { } ( ) [ await ] ] ; 
`${ ++ await }` ; 
`${ 0 }${ + ! await }` ; 
`${ 0 }${ + 0 }${ await || 0 }` ; 
`${ 0 }${ - await }` ; 
`${ 0 }${ 0 !== await }` ; 
`${ 0 }${ 0 }${ - ~ await }` ; 
`${ 0 }${ 0 }${ 0 <= await }` ; 
`${ 0 }${ 0 }${ 0 == await }` ; 
`${ 0 }${ 0 }${ 0 >>> await }${ 0 }` ; 
`${ 0 }${ 0 }${ 0 ^ await }` ; 
`${ 0 }${ 0 }${ 0 in await }${ 0 }` ; 
`${ 0 }${ 0 }${ await ( ) }` ; 
`${ 0 }${ 0 }${ await === new 0 }${ 0 }` ; 
`${ 0 }${ 0 }${ await ?? 0 }` ; 
`${ 0 }${ 0 }${ await in 0 }${ 0 }` ; 
`${ 0 }${ 0 }${ await }` ; 
`${ 0 }${ 0 }${ typeof await }` ; 
`${ 0 }${ [ await ] }` ; 
`${ 0 }${ `${ await }` }` ; 
`${ 0 }${ await && 0 }` ; 
`${ 0 }${ await ++ }` ; 
`${ 0 }${ await ??= 0 }` ; 
`${ 0 }${ await }` ; 
`${ 0 }${ { } = await }` ; 
`${ `${ await }` ? 0 : 0 }` ; 
`${ await & 0 }` ; 
`${ await << 0 }` ; 
`${ await ?. x }` ; 
`${ await }` != 0 ; 
`${ await }` ; 
`${ await }` >> 0 ; 
`` . x ||= await , 0 ; 
async function * await ( ) { } switch ( await ) { case x = 0 : default : } 
async function await ( ) { } 0 > 0 in await ; 
async function await ( ) { } `${ 0 }${ 0 }${ 0 in await }${ 0 }` ; 
async function await ( ) { } throw await &&= 0 ; 
await != 0 ; 
await !== 0 ; 
await && 0 ; 
await &&= 0 ; 
await &&= 0 ; class await { } 
await &= 0 ; 
await ( ) ; 
await ( ) >= 0 ; 
await ** 0 , 0 ; class await { } 
await ** 1 ; 
await ++ ; 
await , 0 ; 
await -- ** 0 ?? 0 ; 
await -- ; 
await . x !== 0 ; 
await . x &&= 0 ; 
await . x -- < 0 ; 
await . x ; 
await . x ; class await { } 
await : ; 
await : x : ; 
await : x : break await ; 
await : x : break x ; 
await : x : throw 0 ; 
await ; 
await ; var await ; 
await = 0 ; 
await == 0 < x & 0 ; 
await === 0 === 0 ; 
await === 0 ^ 0 ; 
await > 0 , 0 ; 
await >= 1 ; 
await >>> 0 != 0 ; 
await >>> 0 && 0 ; 
await ? 0 : 0 ; 
await ? 0 : 0 ; function await ( ) { } 
await ?. x ; 
await ?. x ; async function await ( ) { } 
await ?. x >> 0 ; 
await ?. x in 0 ?? 0 ; 
await ?? 0 , `` . x = 0 ; 
await ?? 0 ; 
await ??= 0 ; 
await ^ 0 ; 
await in 0 ; 
await instanceof 0 ; 
await instanceof 0 ? 0 : 0 ; 
await | 0 ; 
await ||= 0 ; 
class await { } ( await ) ; 
class await { } - { ... await } ; 
class await { } 0 ( ... await ) ; 
class await { } 0 . x = 0 === await != 0 ; 
class await { } await ? 0 : 0 ; 
class await { } await ||= 0 ; 
class await { } for ( let [ [ ] = await , x , , ] of [ `` ] ) ; 
class await { } for ( var x ; 0 . x ??= await ; 0 ) { } 
class await { } let [ x = await ] = '' ; 
class await { } var x = 0 [ 0 . x %= await = 0 ] %= 0 ; 
class await { } var x = await ; 
class x extends 0 [ await ] { ; } 
class x extends 0 [ await ] { } 
class x extends `${ await }` { ; } 
class x extends `${ await }` { } 
class x extends function ( ) { } ( ) [ await ] { ; } 
class x { [ - await ] ; } 
class x { [ 0 . x &= await ] ; } 
class x { [ 0 . x = await ] ; } 
class x { [ 0 . x ||= await ] ; } 
class x { [ 0 instanceof await ] ; } 
class x { [ `${ 0 }` [ 0 ] &&= await ] ; } 
class x { [ await && 0 in 0 - 0 - 0 ] ; } 
class x { [ await ( ) ] ; } 
class x { [ await ++ ] ; } 
class x { [ await ?. x ] ; } 
class x { [ await ] ; } 
class x { [ await ] = 0 ; } 
class x { [ function ( ) { } ( ) [ await ] ||= 0 ] ; } 
class x { [ typeof await ] ; } 
class x { [ void await ] ; } 
class x { [ ~ await ] ; } 
class x { set [ #x in await ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ await . #x ] ( x ) { } get #x ( ) { } }
class x { static set [ await ] ( x ) { } } 
delete await ?. x ; 
do ; while ( 0 , await ) ; 
do ; while ( 0 ? 0 : await ) ; 
do ; while ( 0 instanceof await ) ; 
do ; while ( await ) ; 
do ; while ( await ) ; class await { } 
do ; while ( void await ) ; 
do if ( await ?. x ) ; while ( 0 ) ; 
for ( 0 !== await ; 0 ; 0 ) ; 
for ( 0 . x = await ; ; ) ; 
for ( 0 . x in -- await ) ; 
for ( 0 ; - await ; ) ; 
for ( 0 ; await && 0 ; ) ; 
for ( 0 ; await ; ) ; 
for ( 0 ; typeof await !== 0 << 0 === 0 ; 0 ) ; 
for ( 0 ; x ?. x [ await ] ; 0 ) ; 
for ( 0 ; { } ? await : 0 ; 0 ) ; 
for ( 0 [ 0 ] in 0 < 1 ? await : 0 ) ; 
for ( 0 [ 0 ] in 0 >= ( await >>> 0 ) ) ; 
for ( 0 instanceof await ; ; ) ; class await { } 
for ( 0 | 0 ; 1 ; ) throw await ; 
for ( ; + await ; 0 ) ; 
for ( ; ++ await . x ; 0 ) ; 
for ( ; - { [ Symbol . toPrimitive ] : await => 0 } ; 0 ) ; 
for ( ; - { [ Symbol . toPrimitive ] : await => { } } ; 0 ) ; 
for ( ; 0 ( ) ; 0 ) await : for ( let x ; ; ) ; 
for ( ; 0 . x = await ; ) ; 
for ( ; 0 >>> await ; 0 ) ; 
for ( ; 0 [ await &&= 0 ] ??= new 0 ; ) ; 
for ( ; 0 instanceof await ; 0 ) ; 
for ( ; 0 || await -- ; ) ; 
for ( ; ; ) throw await ; 
for ( ; ; ) var [ ] = await , x ; [ 0 , 0 === 0 ] ; 
for ( ; ; 0 ) throw await ; 
for ( ; ; 0 ? 0 : await ??= 0 ) ; 
for ( ; ; await ) ; 
for ( ; ; await ) var x ; 
for ( ; await && 0 ; 0 ) ; 
for ( ; await ++ ; 0 ) ; 
for ( ; await . x ; 0 ) ; 
for ( ; await ; ) ; 
for ( ; await ; ) ; class await { } 
for ( ; await ; ) var await = 0 ; 
for ( ; await ; 0 ) ; 
for ( ; await ; 0 ) ; class await { }
for ( ; await ? 0 : 0 ; 0 ) ; 
for ( ; await instanceof 0 ; ) await : for ( let { x } in 0 ) ; 
for ( ; function ( ) { } ( ) [ await ] ??= 0 ; ) ; 
for ( ; { } = await ; 0 ) ; 
for ( ; ~ await ; 0 ) break ; 
for ( ; ~ ~ await ++ ; ) ; 
for ( `${ await }` ; ; ) break ; 
for ( await ++ ; 1 ; 0 ) ; 
for ( await , 0 ; 0 ; ) ; 
for ( await -- >= 0 ; 0 ; 0 ) ; 
for ( await ; 0 ; 0 ) ; 
for ( await ; ; ) ; 
for ( await ; ; ) var x , x ; 
for ( await ; ; 0 ) break ; 
for ( await < 0 ; ; ) ; 
for ( await = 0 ; ; ) break ; 
for ( await [ 0 ] in 0 <= 0 << 0 - null . x ( ) , { get : '' } ) ; 
for ( await ^ 0 ; ; 0 ) break ; 
for ( await instanceof new await ( ) ; ; ) ; function await ( ) { } 
for ( function ( ) { } ( ) [ 0 instanceof { [ Symbol . hasInstance ] : await => new 0 } ] of [ 0 ] ) ; 
for ( function ( ) { } ( ) [ 0 instanceof { [ Symbol . hasInstance ] : await => { } } ] of [ 0 ] ) ; 
for ( function * ( ) { } ( ) [ 0 . x = await ] of [ 0 ] ) ; 
for ( let [ [ ] = await , x , , ] of [ `` ] ) ; async function await ( ) { } 
for ( let [ ] = await ++ ; ; 0 ) { } x : ; 
for ( let [ x = 0 [ await ] ] of [ `` ] ) ; 
for ( let await ; await ; 0 ) ; 
for ( let x ; ! await ; ) ; 
for ( let x ; + await ; ) ; 
for ( let x ; + await ; 0 ) ; 
for ( let x ; - await ; ) ; 
for ( let x ; - await ; 0 ) ; 
for ( let x ; - await ; 0 ) ; class await { } 
for ( let x ; 0 != await ; ) ; 
for ( let x ; 0 != await ; ) ; class await { } 
for ( let x ; 0 !== await ; ) ; 
for ( let x ; 0 & await ; ) ; 
for ( let x ; 0 & await ; 0 ) ; 
for ( let x ; 0 , await ; ) ; 
for ( let x ; 0 . x %= await ; ) ; 
for ( let x ; 0 . x = await ; 0 ) ; 
for ( let x ; 0 . x ??= await ; ) ; 
for ( let x ; 0 <= 0 <= await ; ) ; 
for ( let x ; 0 <= await % 0 ; ) ; 
for ( let x ; 0 <= await ; 0 ) ; 
for ( let x ; 0 === await ; 0 ) ; 
for ( let x ; 0 > await ; 0 ) ; 
for ( let x ; 0 >> await ; 0 ) ; 
for ( let x ; 0 >>> await ; ) ; 
for ( let x ; 0 >>> await ; 0 ) ; 
for ( let x ; 0 ? 0 : await ; 0 ) ; 
for ( let x ; 0 ?. x !== await ; ) ; 
for ( let x ; 0 [ 0 ] ??= await ; 0 ) ; 
for ( let x ; 0 [ await ] ; ) ; 
for ( let x ; 0 [ await ] ; 0 ) ; 
for ( let x ; 0 ^ await ; ) ; 
for ( let x ; 0 instanceof await ; ) ; 
for ( let x ; 0 | await ; 0 ) ; 
for ( let x ; 0 || await ; 0 ) ; 
for ( let x ; 1 && await ; ) ; 
for ( let x ; 1 < await ; ) ; 
for ( let x ; ; ) if ( await ) ; else break ; 
for ( let x ; ; ) if ( await . x ) ; 
for ( let x ; ; ) throw await ; 
for ( let x ; ; 0 ) throw await ; 
for ( let x ; ; 0 . x %= await ) ; 
for ( let x ; ; 0 . x ??= await ) ; 
for ( let x ; ; 0 . x ||= await ) ; 
for ( let x ; ; [ ] = 0 ) await ; 
for ( let x ; ; [ ] = await ) ; 
for ( let x ; ; await , 0 ( ) . x ||= 0 ) ; 
for ( let x ; ; await . x %= 0 ) ; 
for ( let x ; ; await = 0 ) ; 
for ( let x ; ; await = 0 ) ; let await ; 
for ( let x ; ; await = 0 ) for ( ; 0 ; ) ; 
for ( let x ; ; await = await ) ; let await ; 
for ( let x ; ; await = class x { } ) ; 
for ( let x ; ; await = new 0 ) ; 
for ( let x ; ; await = x => 0 ) ; 
for ( let x ; ; await ??= 0 ) ; 
for ( let x ; ; function ( ) { } . x ??= await ) ; 
for ( let x ; ; x => 0 ) if ( await ) ; else ; 
for ( let x ; ; x => 0 ) switch ( await ) { } 
for ( let x ; [ ] . x ||= await ; ) ; 
for ( let x ; `${ await }` ; 0 ) throw 0 ; 
for ( let x ; await != 0 ; 0 ) ; 
for ( let x ; await !== 0 ; 0 ) ; 
for ( let x ; await && 0 ; ) ; 
for ( let x ; await && 0 ; 0 ) ; 
for ( let x ; await ( ) ; ) ; 
for ( let x ; await ( ) ; 0 ) ; 
for ( let x ; await ** ! 0 ; ) ; 
for ( let x ; await ** ! 0 ; 0 ) ; 
for ( let x ; await *= 0 ; 0 ) ; 
for ( let x ; await *= 0 ; 0 ) ; class await { } 
for ( let x ; await ++ ; ) ; 
for ( let x ; await ++ ; 0 ) ; 
for ( let x ; await -- ; 0 ) ; 
for ( let x ; await . x ++ ; 0 ) ; 
for ( let x ; await / 0 ; ) ; 
for ( let x ; await ; ) ; 
for ( let x ; await ; ) var await ; 
for ( let x ; await ; 0 ) ; 
for ( let x ; await ; 0 ) ; class await { } 
for ( let x ; await ; 0 ) var await ; 
for ( let x ; await < 0 ; 0 ) ; 
for ( let x ; await << 0 ; ) ; 
for ( let x ; await << 0 ; 0 ) ; 
for ( let x ; await = 0 ; ) ; 
for ( let x ; await = await ; ) ; 
for ( let x ; await = class x { } ; ) ; 
for ( let x ; await = x ; ) ; 
for ( let x ; await = x => 0 ; ) ; 
for ( let x ; await = x => 0 ; ) ; class await { } 
for ( let x ; await == 0 ; ) ; 
for ( let x ; await == 0 ; 0 ) ; 
for ( let x ; await === 0 ; ) break ; 
for ( let x ; await > 0 ; ) ; 
for ( let x ; await >= ! 0 ; ) ; 
for ( let x ; await >= ! 0 ; 0 ) ; 
for ( let x ; await >> 0 ; ) ; 
for ( let x ; await >>> 0 ; ) ; 
for ( let x ; await ? 0 : 0 ; ) ; 
for ( let x ; await ?. x ; ) ; 
for ( let x ; await ?. x ; 0 ) ; 
for ( let x ; await ?? 0 ; ) ; 
for ( let x ; await ^ 0 ; ) ; 
for ( let x ; await ^ 0 ; 0 ) ; 
for ( let x ; await in 0 ; 0 ) ; 
for ( let x ; await in this ; ) ; 
for ( let x ; await | 0 ; ) ; 
for ( let x ; await || 0 ; ) ; 
for ( let x ; await ||= 0 ; 0 ) ; 
for ( let x ; function ( ) { } ( ) [ await ] ; ) ; 
for ( let x ; typeof await ; ) break ; 
for ( let x ; void await -- ; 0 ) ; 
for ( let x ; void await ; ) ; 
for ( let x ; void await ; 0 ) ; 
for ( let x ; x * await ; 0 ) ; 
for ( let x ; x == 0 == await ; 0 ) ; 
for ( let x ; x ?? await ; ) ; 
for ( let x ; x instanceof await ; 0 ) ; 
for ( let x ; { } ? await : 0 ; ) ; 
for ( let x ; ~ ~ await ; ) ; 
for ( let x in ! await ) ; 
for ( let x in + await ) ; 
for ( let x in - await ) ; 
for ( let x in 0 !== await ) ; 
for ( let x in 0 * await ) ; 
for ( let x in 0 + await ) ; 
for ( let x in 0 - await ) ; 
for ( let x in 0 . x ??= await ) ; 
for ( let x in 0 . x ||= await ) ; 
for ( let x in 0 << await ) ; 
for ( let x in 0 == await ) ; 
for ( let x in 0 >= await ) ; 
for ( let x in 0 >>> await ) ; 
for ( let x in 0 [ await ] ) ; 
for ( let x in 0 ^ await ) ; 
for ( let x in 0 | await ) ; 
for ( let x in 0 || await ) ; 
for ( let x in 1 > await ) ; 
for ( let x in [ 0 ] ) await ; 
for ( let x in [ 0 ] ) if ( await ) ; else throw 0 ; 
for ( let x in await != 0 ) ; 
for ( let x in await %= 0 ) ; 
for ( let x in await & 0 ) ; 
for ( let x in await ( ) ) ; 
for ( let x in await ) ; 
for ( let x in await ) ; async function await ( ) { } 
for ( let x in await ) for ( 0 ; ; ) ; 
for ( let x in await ** 0 ) ; 
for ( let x in await . x ) ; 
for ( let x in await < 0 ) ; 
for ( let x in await <= 0 ) ; 
for ( let x in await === 0 ) ; 
for ( let x in await >> 0 ) ; 
for ( let x in await ?. x ) ; 
for ( let x in await `` ) ; 
for ( let x in await in 0 ) ; 
for ( let x in await instanceof 0 ) ; 
for ( let x in function ( ) { } ( ) [ await ] ) ; 
for ( let x in function ( ) { } ( ) [ await ] in 0 ) ; 
for ( let x in void await ) ; 
for ( let x in ~ await ) ; 
for ( let x of ! await ) ; 
for ( let x of '' . x ||= await ) ; 
for ( let x of + await ) ; 
for ( let x of - await ) ; 
for ( let x of 0 != await ) ; 
for ( let x of 0 & await ) ; 
for ( let x of 0 * await ) ; 
for ( let x of 0 - await ) ; 
for ( let x of 0 . x *= await ) ; 
for ( let x of 0 . x = await ) ; 
for ( let x of 0 . x ??= await ) ; 
for ( let x of 0 <= await ) ; 
for ( let x of 0 == await ) ; 
for ( let x of 0 === await ) ; 
for ( let x of 0 > await ) ; 
for ( let x of 0 >>> await ) ; 
for ( let x of 0 [ await = 0 | 0 ] ||= 0 ) ; 
for ( let x of 0 ^ await ) ; 
for ( let x of 0 in await ) ; 
for ( let x of 0 instanceof await ) ; 
for ( let x of 0 | await ) ; 
for ( let x of [ , ] ) await ;
for ( let x of [ 0 ] ) await ; 
for ( let x of [ 0 ] ) if ( await ) ; 
for ( let x of await !== 0 ) ; 
for ( let x of await && 0 ) ; 
for ( let x of await ( ) ) ; 
for ( let x of await ) ; 
for ( let x of await ** 0 ) ; 
for ( let x of await . x ) ; 
for ( let x of await < 0 ) ; 
for ( let x of await << 0 ) ; 
for ( let x of await = 0 ) ; 
for ( let x of await >= 0 ) ; 
for ( let x of await >> 0 ) ; 
for ( let x of await ? 0 : 0 ) ; 
for ( let x of await || 0 ) ; 
for ( let x of this != this == await == 0 ) ; 
for ( let x of this ? await : 0 ) ; 
for ( let x of void await ) ; 
for ( let x of ~ await ) ; 
for ( let { await , x } in [ await ] ) ; 
for ( let { await , x } in await ) ; 
for ( var [ x , , ... x ] of await &&= 0 ) ; 
for ( var await = 0 ; ; 0 ?? 0 ) throw await ; 
for ( var await = await ; ; 0 ?? 0 ) break ; 
for ( var await in await ) ; 
for ( var await of [ await ] ) ; 
for ( var await of await ) ;
for ( var x , [ ] = x [ await ] , x ; ; ) ; 
for ( var x , x ; ; await ) ; 
for ( var x ; + await ; ) ; 
for ( var x ; + await ; 0 ) ; 
for ( var x ; ++ await . x ; ) ; 
for ( var x ; ++ await . x ; 0 ) ; 
for ( var x ; ++ await / 0 ; ) ; 
for ( var x ; ++ await ; ) ; 
for ( var x ; ++ await ; 0 ) ; 
for ( var x ; - await ; ) ; 
for ( var x ; - await ; 0 ) ; 
for ( var x ; - { ... [ ] = await } ; ) ; 
for ( var x ; - { ... await = 0 } ; ) ; 
for ( var x ; -- await ; ) ; 
for ( var x ; 0 % await ; ) ; 
for ( var x ; 0 + await ; ) ; 
for ( var x ; 0 + await ; 0 ) ; 
for ( var x ; 0 - await ; ) ; 
for ( var x ; 0 - await ; 0 ) ; 
for ( var x ; 0 . x & await ; ) ; 
for ( var x ; 0 . x = await ; 0 ) ; 
for ( var x ; 0 . x ||= await ; 0 ) ; 
for ( var x ; 0 < await ; ) ; 
for ( var x ; 0 < await ; 0 ) ; 
for ( var x ; 0 << await ; ) ; 
for ( var x ; 0 << await ; 0 ) ; 
for ( var x ; 0 <= await ; 0 ) ; 
for ( var x ; 0 == await ; ) ; 
for ( var x ; 0 === 0 ** { [ Symbol . toPrimitive ] : await => { } } ; 0 ) ; 
for ( var x ; 0 > await ; ) ; 
for ( var x ; 0 >= await ; ) break ; 
for ( var x ; 0 >> 0 >>> await ; ) ; 
for ( var x ; 0 >> await ; 0 ) ; 
for ( var x ; 0 >>> await ; 0 ) ; 
for ( var x ; 0 ? 0 : await ++ ; 0 ) ; 
for ( var x ; 0 ? 0 : await . x ++ ; 0 ) ; 
for ( var x ; 0 [ await ] ; 0 ) ; 
for ( var x ; 0 ^ await ; 0 ) ; 
for ( var x ; 0 instanceof await ; 0 ) ; 
for ( var x ; 0 | await ; ) ; 
for ( var x ; 0 || await ; ) ; 
for ( var x ; ; ) if ( await ) ; else break ; 
for ( var x ; ; ) if ( await ) ; else break ; class await { } 
for ( var x ; ; ) if ( await . x -- ) ; else ; 
for ( var x ; ; ) switch ( await , 0 ( ) . x &&= 0 ) { } 
for ( var x ; ; ) throw await ; 
for ( var x ; ; 0 ) throw await ; 
for ( var x ; ; 0 . x %= await ) ; 
for ( var x ; ; 0 . x = await ) ; 
for ( var x ; ; 0 . x ??= await ) ; 
for ( var x ; ; 0 . x ||= await ) ; 
for ( var x ; ; 0 instanceof await ) ; 
for ( var x ; ; [ ] = await ) ; 
for ( var x ; ; await != 0 in 0 ) ; 
for ( var x ; ; await !== 0 instanceof 0 ) ; 
for ( var x ; ; await ( ) ) ; 
for ( var x ; ; await ) 0 ; 
for ( var x ; ; await ) ; 
for ( var x ; ; await ) ; class await { } 
for ( var x ; ; await ) for ( let x in 0 ) ; 
for ( var x ; ; await ) for ( var x in 0 ) ; 
for ( var x ; ; await ) if ( 0 ) ; 
for ( var x ; ; await ) switch ( 0 ) { } 
for ( var x ; ; await ) try { if ( 0 , 0 ) 0 ; } catch { } finally { } 
for ( var x ; ; await ) try { } catch { } finally { } 
for ( var x ; ; await ) try { } finally { } 
for ( var x ; ; await ) while ( 0 ) ; 
for ( var x ; ; await ) x : ; 
for ( var x ; ; await ) x : for ( var x ; 0 ; ) ; 
for ( var x ; ; await ) { ; ; } 
for ( var x ; ; await ) { ; } 
for ( var x ; ; await ) { } 
for ( var x ; ; await ** + 0 ( ) ) ; 
for ( var x ; ; await + new 0 ** 0 ) ; 
for ( var x ; ; await , x => 0 ) ; 
for ( var x ; ; await -- ) ; 
for ( var x ; ; await . x ++ ) ; 
for ( var x ; ; await . x -- ) ; 
for ( var x ; ; await << new 0 ** 0 ) ; 
for ( var x ; ; await = 0 ) ; 
for ( var x ; ; await = class { } ) ; 
for ( var x ; ; await === 0 in 0 ) ; 
for ( var x ; ; await ?. ( ) ) ; 
for ( var x ; ; await ^ 0 in 0 ) ; 
for ( var x ; ; await in 0 ) ; 
for ( var x ; ; await | 0 instanceof 0 ) ; 
for ( var x ; ; await || 0 & 0 instanceof 0 & 0 ) ; 
for ( var x ; ; x => 0 ) if ( await ) ; else ; 
for ( var x ; ; { } . x ||= await ) ; 
for ( var x ; `${ await }` ; ) break ; 
for ( var x ; `${ await }` ; 0 ) break ; 
for ( var x ; `` . x += await ; ) ; 
for ( var x ; await != 0 ; ) ; 
for ( var x ; await != 0 ; 0 ) ; 
for ( var x ; await != 0 ; 0 ) ; class await { } 
for ( var x ; await !== 0 ; ) ; 
for ( var x ; await !== 0 ; 0 ) ; 
for ( var x ; await %= 0 ; 0 ) ; 
for ( var x ; await & 0 ; 0 ) ; 
for ( var x ; await && 0 ; ) ; 
for ( var x ; await &&= 0 ; ) ; 
for ( var x ; await ( ) ; ) ; 
for ( var x ; await ( ) ; 0 ) ; 
for ( var x ; await ** ! 0 ; ) ; 
for ( var x ; await ** ! 0 ; 0 ) ; 
for ( var x ; await ++ ; ) ; 
for ( var x ; await , 0 ; ) ; 
for ( var x ; await . x ++ ; ) ; 
for ( var x ; await . x ++ ; 0 ) ; 
for ( var x ; await . x ; ) ; 
for ( var x ; await . x ; 0 ) ; 
for ( var x ; await / 0 ; 0 ) ; 
for ( var x ; await ; ) ; 
for ( var x ; await ; 0 ) ; 
for ( var x ; await ; 0 ) ; class await { }
for ( var x ; await < 0 ; ) ; 
for ( var x ; await < 0 ; 0 ) ; 
for ( var x ; await << 0 ; 0 ) ; 
for ( var x ; await <= 0 % 0 ; ) ; 
for ( var x ; await = 0 ; ) ; 
for ( var x ; await = 0 ; 0 ) ; 
for ( var x ; await = async x => 0 ; 0 ) ; 
for ( var x ; await == 0 ; 0 ) ; 
for ( var x ; await === 0 >= 0 ; ) ; 
for ( var x ; await === ~ 0 ; 0 ) ; 
for ( var x ; await > 0 ; 0 ) ; 
for ( var x ; await > 1 ; ) ; 
for ( var x ; await >= x ; 0 ) ; 
for ( var x ; await >> 0 ; ) ; 
for ( var x ; await >>> 0 ; 0 ) ; 
for ( var x ; await ? 0 : x ; ) ; 
for ( var x ; await ? 0 : x ; 0 ) ; 
for ( var x ; await ?. x ; ) ; 
for ( var x ; await ?. x ; 0 ) ; 
for ( var x ; await ?. x ?. x ; 0 ) ; 
for ( var x ; await ?? 0 ; ) ; 
for ( var x ; await ?? 0 ; 0 ) ; 
for ( var x ; await ??= 0 ; ) ; 
for ( var x ; await ??= 0 ; 0 ) ; 
for ( var x ; await ^ 0 ; ) ; 
for ( var x ; await in 0 ; ) ; 
for ( var x ; await in 0 ; 0 ) ; 
for ( var x ; await instanceof 0 ; ) ; 
for ( var x ; await | 0 ; ) ; 
for ( var x ; await | 0 ; 0 ) ; 
for ( var x ; await || 0 ; 0 ) ; 
for ( var x ; await ||= 0 ; ) ; 
for ( var x ; class x { } ; ) throw await ; 
for ( var x ; function ( ) { } ( ) [ await ] ; 0 ) ; 
for ( var x ; this . x = await ; ) ; 
for ( var x ; this . x ??= 0 ; typeof await ) var x = 0 ; function x ( ) { } 
for ( var x ; this . x ^= 1 ; ) if ( await ) ; 
for ( var x ; void await ; ) ; 
for ( var x ; x >> import ( function ( ) { } ( ) [ await , 0 ] . x %= 0 ) >>> 0 ; ) ; 
for ( var x ; x ?? await ; ) ; 
for ( var x ; { } ? await : x ; 0 ) ; 
for ( var x ; ~ await ; 0 ) ; 
for ( var x = 0 . x . x ; ; await ) ; 
for ( var x = 0 . x ; ; await ) ; 
for ( var x = 0 ; ; await ) ; 
for ( var x = await ; 0 ; ) ; 
for ( var x = await ; 0 ; 0 ) ; 
for ( var x = await ; ; ) break ; 
for ( var x = await ; ; await ) ; 
for ( var x = class x { } ; ; await ) ; 
for ( var x = x ; ; await ) ; 
for ( var x = x => 0 ; ; await ) ; 
for ( var x in ! await ) ; 
for ( var x in '' ? 0 : await ) ; 
for ( var x in + await ) ; 
for ( var x in ++ await != 0 ) ; 
for ( var x in ++ await ) ; 
for ( var x in ++ await . x == 0 ) ; 
for ( var x in - await ) ; 
for ( var x in - await ) for ( let x ; 0 ; 0 ) ; 
for ( var x in 0 != await ) ; 
for ( var x in 0 !== await ) ; 
for ( var x in 0 & await ) ; 
for ( var x in 0 + 0 ** 0 ^ 0 & { [ 0 ? 0 : 0 ] : await ?? 0 } ) ; 
for ( var x in 0 + await ) ; 
for ( var x in 0 , await ) ; 
for ( var x in 0 - await ) ; 
for ( var x in 0 . x ??= await ) ; 
for ( var x in 0 . x ||= await ) ; 
for ( var x in 0 < await ) ; 
for ( var x in 0 << await ) ; 
for ( var x in 0 > await ) ; 
for ( var x in 0 >> await ) ; 
for ( var x in 0 >>> await ) ; 
for ( var x in 0 [ await ] ) ; 
for ( var x in 0 ^ await ) ; 
for ( var x in 0 instanceof await ) ; 
for ( var x in 1 && await ) ; 
for ( var x in 1 / await ) ; 
for ( var x in [ 0 ] ) await ; 
for ( var x in await % 0 ) ; 
for ( var x in await & 1 ) ; 
for ( var x in await && 0 ) ; 
for ( var x in await ( ) ) ; 
for ( var x in await ) ; 
for ( var x in await ** 0 ) ; 
for ( var x in await ++ || 0 ) ; 
for ( var x in await -- ) ; 
for ( var x in await . x ) ; 
for ( var x in await . x -- ) ; 
for ( var x in await . x ??= 0 ) ; 
for ( var x in await < 0 ) ; 
for ( var x in await << 0 ) ; 
for ( var x in await <= 0 ) ; 
for ( var x in await = 0 ) ; 
for ( var x in await == 0 ) ; 
for ( var x in await >= 0 ) ; 
for ( var x in await >>>= 0 ) ; 
for ( var x in await ?. x ) ; 
for ( var x in await ?? 0 ) ; 
for ( var x in await ^ 0 ) ; 
for ( var x in await in 0 ) ; 
for ( var x in await | 0 ) ; 
for ( var x in await || 0 ) ; 
for ( var x in function ( ) { } ( ) [ await ] ) ; 
for ( var x in x ++ || await ) ; 
for ( var x in x = await ) ; 
for ( var x in x == await ++ ) ; 
for ( var x in x ?? await ) ; 
for ( var x in x ?? await ) ; var await = 0 ; 
for ( var x in { x } ) await ;
for ( var x in { x } ) await ; class await { } 
for ( var x in { x } ) if ( await ) ; 
for ( var x in { x } ) throw await ; 
for ( var x in ~ - await === 0 ) ; 
for ( var x in ~ await ) ; 
for ( var x of ! await ) ; 
for ( var x of + await ) ; 
for ( var x of - await ) ; 
for ( var x of 0 != await ) ; 
for ( var x of 0 !== await ) ; 
for ( var x of 0 % await ) ; 
for ( var x of 0 & await ) ; 
for ( var x of 0 ** await ) ; 
for ( var x of 0 + await ) ; 
for ( var x of 0 . x += await ) ; 
for ( var x of 0 . x = await ) ; 
for ( var x of 0 . x ||= await ) ; 
for ( var x of 0 < await ) ; 
for ( var x of 0 << ! await -- ) ; 
for ( var x of 0 << await -- ) ; 
for ( var x of 0 <= await ) ; 
for ( var x of 0 == await ) ; 
for ( var x of 0 > await ) ; 
for ( var x of 0 >= await ) ; 
for ( var x of 0 >>> await ) ; 
for ( var x of 0 ? 0 : await ) ; 
for ( var x of 0 ^ await ) ; 
for ( var x of 0 in await ) ; 
for ( var x of 0 instanceof await ) ; 
for ( var x of 0 | await ) ; 
for ( var x of [ 0 ] ) await ; 
for ( var x of [ 0 ] ) if ( await ) ; 
for ( var x of [ 0 ] ) if ( await ) ; else ; 
for ( var x of async function * ( ) { } ( ) [ await ] ) ; 
for ( var x of await != x ) ; 
for ( var x of await !== 0 ) ; 
for ( var x of await && 0 ) ; 
for ( var x of await ( ) ) ; 
for ( var x of await ) ; 
for ( var x of await ** 0 ) ; 
for ( var x of await . x ) ; 
for ( var x of await << 0 ) ; 
for ( var x of await <= 0 ) ; 
for ( var x of await > 0 ) ; 
for ( var x of await >> ~ new 0 ( ) ) ; 
for ( var x of await >>> 0 ) ; 
for ( var x of await ?. x ) ; 
for ( var x of await ?? 0 ) ; 
for ( var x of await ??= 0 ) ; 
for ( var x of await ^ 0 ) ; 
for ( var x of await instanceof 0 ) ; 
for ( var x of await || 0 ) ; 
for ( var x of await ||= 0 ) ; 
for ( var x of x ?? await ) ; 
for ( var x of ~ 0 === await ) ; 
for ( var x of ~ await ) ; 
for ( var { } = 0 ; ; await ) ; 
for ( x = await ; 0 ; ) ; 
for ( x in [ ++ 0 [ await ] ] ) ; 
for ( x in await !== 0 ** 0 ) ; 
for ( x in await ) ; 
for ( x in await `` ) ; 
for ( x in true && await ) ; 
for ( x of ! ~ await ) ; 
for ( x of 0 ? 0 : await ) ; 
for ( x of 0 in await ) ; 
for ( x of await ) ; 
for ( x of await ) ; class await { } 
for ( x of await += 0 ) ; 
for ( x of await -- ) ; 
for ( x of { [ Symbol . iterator ] : ++ await } ) ; 
for ( { [ Symbol . toPrimitive ] : await => 0 ( ) } ^ 0 ; ; ) throw 0 ; 
for ( { [ Symbol . toPrimitive ] : await => 0 } ^ 0 ; ; ) throw 0 ; 
for ( { [ Symbol . toPrimitive ] : await => { } } ^ 0 ; ; ) throw 0 ; 
for ( { } . x of [ 0 , ] ) if ( await ) ; 
for ( { } = await ; 0 ; ) ; 
for ( { } in [ 0 ] ) if ( 0 ) ; else await ; 
for ( { } in [ 0 ] ) if ( await ) ; 
for ( { } of [ 0 ] ) switch ( await ) { } 
for ( { } of await . x ++ ) break ; 
for ( { } of await ||= 0 ) ; 
function * await ( ) { } 0 ( ... await ? 0 : 0 ) ; 
function * await ( ) { } [ 0 , , await . x = 0 ] ; 
function * await ( ) { } await ||= 0 ; 
function * await ( ) { } for ( let x of 0 ?. x ?. x ? await : 0 ) ; 
function * await ( ) { } for ( let x of this ? await : 0 ) ; 
if ( ! ! await ) ; 
if ( 0 ) ; else if ( 0 in await ) ; 
if ( 0 ) ; else if ( await ) ; else 0 ; 
if ( 0 ) await : for ( ; ; ) debugger ; 
if ( 0 ) await : x : ; 
if ( 1 ) if ( await ) ; 
if ( `${ 0 }` [ this ] [ await ] ) ; 
if ( await ) ; 
if ( await ) ; class await { } 
if ( await ) ; else ; 
if ( await ) ; else ; async function await ( ) { } 
if ( await ) ; else ; class await { } 
if ( await ) ; function * await ( ) { } 
if ( await = 0 ) ; 
if ( await = x ) ; else ; 
if ( await === 0 , 0 ) ; else ; 
if ( await ?. x ) ; else ; 
if ( await ?. x >>> 0 ) ; 
if ( void await ) ; else ; 
if ( void await ) x : ; 
let [ , [ ] = 0 . x ??= await ] = '' ; 
let [ , ] = await , x ; 
let [ , ] = await = class x { } ; 
let [ , ] = await = x ; 
let [ , x = await . x ] = '' ; 
let [ , x = await ] = '' ; 
let [ [ ] = ! 0 >>> await ] = '' ; 
let [ [ ] = - await ] = '' , x ; 
let [ [ ] = await !== 0 . x ] = '' ; 
let [ [ ] = await , x ] = '' ; 
let [ [ ] = await instanceof 0 ] = '' , x ; 
let [ [ ] = typeof await ] = '' , x ; 
let [ ] = 0 [ await ] , x ; 
let [ ] = 0 | 0 instanceof await ?? 0 ; 
let [ ] = await &&= x => 0 ; 
let [ ] = await ; 
let [ ] = await === 0 ; 
let [ ] = await ?. x ; 
let [ ] = await instanceof x , x ; 
let [ ] = ~ await ; 
let [ await ] = await ; 
let [ x , , , ... await ] = [ await , , 0 , ] ; 
let [ x , , ... await ] = [ 0 , , await , ] ; 
let [ x = + await ] = '' ; 
let [ x = - await ] = '' ; 
let [ x = 0 !== await ] = '' ; 
let [ x = 0 & await ] = '' ; 
let [ x = 0 * await ] = '' ; 
let [ x = 0 . x %= await ] = '' ; 
let [ x = 0 . x = await ] = '' ; 
let [ x = 0 . x ??= await ] = '' ; 
let [ x = 0 . x ||= await ] = '' ; 
let [ x = 0 < await ] = '' ; 
let [ x = 0 >> await ] = '' ; 
let [ x = 0 >>> await ] = '' ; 
let [ x = 0 ^ await ] = '' ; 
let [ x = 0 | await ] = '' ; 
let [ x = 1n && await ] = '' ; 
let [ x = `${ await }` ] = '' ; 
let [ x = await ( ) ] = '' ; 
let [ x = await ** 0 ] = '' ; 
let [ x = await , , ] = '' ; 
let [ x = await <= 0 ] = '' ; 
let [ x = await == 0 ] = '' ; 
let [ x = await > 0 ] = '' ; 
let [ x = await >= 0 ] = '' ; 
let [ x = await ? 0 : 0 ] = '' ; 
let [ x = await ?. x ] = '' ; 
let [ x = await ?? 0 ] = '' ; 
let [ x = await ] = '' ; 
let [ x = await instanceof 0 ] = '' ; 
let [ x = ~ await ] = '' ; 
let [ { } = await ] = '' ; 
let await ; await ; 
let await ; var [ ] = await ; 
let await = await . x ++ ; 
let await = await ; 
let x ; [ 0 , , ... void await ] ; 
let x ; [ await = 0 ] = `` ;
let x ; [ await = 0 ] = `` ; class await { }
let x ; [ await ] = `` ;
let x ; [ await ] = `` ; class await { }
let x ; [ x = await ] = '' ; class await { }
let x ; [ x = await ] = `` ;
let x ; [ { 0 : await = 0 } = 0 ] = '' ;
let x ; [ { 0 : await } = 0 ] = `` ;
let x ; [ { 0 : await } = 0 ] = `` ; class await { }
let x ; [ { 0 : x = await } = 0 ] = '' ;
let x ; for ( + void ~ await ; 0 ; ) ; ; 
let x ; for ( 0 ? 0 : await ; 0 ; ) ; 
let x ; for ( await . x ; 0 ; ) ; 
let x ; for ( await <= 0 ; 0 ; ) ; 
let x ; for ( await ??= 0 | 0 ; 0 ; ) ; 
let x ; for ( x ; 0 instanceof await ; ) ; 
let x ; for ( x => 0 ; await ?? 0 ; ) ; 
let x ; for ( x => 0 ; null ?? await ; ) ; 
let x ; for ( x => 0 ; this . x ^= 1 ; ) if ( await ) ; 
let x ; for ( x => 0 ; this . x ^= 1 ; ) if ( await ) ; else ; 
let x ; switch ( 0 ) { case { } = await : default : } 
let x ; throw await &&= 0 ; 
let x = ! await ; 
let x = 'str' [ 0 ] &&= await += /a/ ; 
let x = 'str' [ 0 ] &&= await ||= 0 ; 
let x = + await ; 
let x = ++ await ; 
let x = - await ; 
let x = -- await ; 
let x = -- function ( ) { } ( ) [ await ] ; 
let x = 0 != await ; 
let x = 0 ** await ; 
let x = 0 - await ; 
let x = 0 . x %= await &&= 0 ; 
let x = 0 . x %= await ; 
let x = 0 . x += [ ] = await ; 
let x = 0 . x ??= await ; 
let x = 0 < await ; 
let x = 0 == 0 && await ; 
let x = 0 === -- await ; 
let x = 0 === await ; 
let x = 0 > await ; 
let x = 0 >>> await ; 
let x = 0 ^ await ; 
let x = 0 in await ; 
let x = 0 | await ; 
let x = `${ 0 }` [ 0 ] &&= ! 0 >>> await ; 
let x = `${ 0 }` [ 0 ] &&= -- await ; 
let x = `${ 0 }` [ 0 ] &&= 0 & 0 << void await ; 
let x = `${ 0 }` [ 0 ] &&= 0 === await ; 
let x = `${ 0 }` [ 0 ] &&= 0 [ 0 ] . x >>> await ; 
let x = `${ 0 }` [ 0 ] &&= 0 in await ; 
let x = `${ 0 }` [ 0 ] &&= `${ await }` ; 
let x = `${ 0 }` [ 0 ] &&= await !== - 0 ; 
let x = `${ 0 }` [ 0 ] &&= await && 0 ; 
let x = `${ 0 }` [ 0 ] &&= await &&= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await <= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await = 0 ; 
let x = `${ 0 }` [ 0 ] &&= await ??= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await instanceof x ; 
let x = `${ 0 }` [ 0 ] &&= null . x >>> await ; 
let x = `${ 0 }` [ 0 ] &&= void await ; 
let x = `${ 0 }` [ 0 ] &&= x = await ; 
let x = await !== 0 ; 
let x = await % 0 ; 
let x = await & x ; 
let x = await &&= 0 ; 
let x = await ( ) ; 
let x = await , [ ] = 0 ; 
let x = await -- ; 
let x = await . x ; 
let x = await ; 
let x = await ; function await ( ) { }
let x = await << 0 ; 
let x = await <= 0 ; 
let x = await = 0 ; 
let x = await == 0 ; 
let x = await >= x ; 
let x = await >> 0 ; 
let x = await ? 0 : 0 ; 
let x = await ?. x ; 
let x = await ?? 0 ; 
let x = await instanceof x ; 
let x = await || 0 ; 
let x = await ||= 0 ; 
let x = class x { } ^ await ; 
let x = delete ! await ; 
let x = delete void await ; 
let x = function ( ) { } ( ) [ await ] ; 
let x = typeof await ; 
let x = void await !== 0 ; 
let x = void await ; 
let x = x = await ; 
let x = ~ await ; 
let { 0 : x = await } = 0 ; 
let { x = 0 . x ||= await } = 0 ; 
let { x = await ( ) } = 0 ; 
new 0 ( 0 !== await ) ; 
new 0 ( 0 , ... function * ( ) { } ( ) [ await &&= 0 ] ++ ) ; 
new 0 ( 0 , 0 . x = await ) ; 
new 0 ( 0 , 0 || await ) ; 
new 0 ( 0 , null . x || await ) ; 
new 0 ( 0 , null || await ) ; 
new 0 ( 0 , true . x || await ) ; 
new 0 ( this ? await : 0 . x ) ; 
new Map ( 0 , await = 0 ) ; 
new Promise ( await => { '' ( ) ?. x ; return 0 ? 0 : void 0 ; } ) ; 
new Promise ( await => { 0 ( ) ?. x ; return 0 ? 0 : 0 <= 0 ; } ) ; 
new Promise ( await => { 0 ( ) ?. x ; return 0 ? delete 0 : 0 ; } ) ; 
new `` ( ... void await ) ; 
new class extends null { static [ await = 0 ] ; } ; 
switch ( '' ?. x ) { case void await : ; } 
switch ( 0 ) { case 0 !== await : ; } 
switch ( 0 ) { case 0 & await : let x ; } 
switch ( 0 ) { case 0 : if ( 0 ) ; else await ; } 
switch ( 0 ) { case 0 : throw await ; } 
switch ( 0 ) { case 0 == await : let x ; } 
switch ( 0 ) { case [ await ] : default : } 
switch ( 0 ) { case `` ? 0 : await : default : } 
switch ( 0 ) { case `` in await : ; } 
switch ( 0 ) { case await && 0 : default : } 
switch ( 0 ) { case await : ; } 
switch ( 0 ) { case await : default : } 
switch ( 0 ) { case await = 0 : default : case 0 : } 
switch ( 0 ) { case await > 0 : let x ; } 
switch ( 0 ) { case await ?? 0 : default : case 0 : } 
switch ( 0 ) { case await ||= 0 : default : } 
switch ( 0 ) { case function ( ) { } ( ) [ await ] : default : } 
switch ( 0 ) { case true && await : default : case 0 : } 
switch ( 0 ) { case { } = await : ; } 
switch ( 0 ) { default : case await : } 
switch ( 0 ) { default : case await >> 0 : } 
switch ( 0 ) { default : case await instanceof 0 : } 
switch ( 0 ) { default : case x >>> await : } 
switch ( 0 ) { default : x ( 0 ) ; case await . x : } 
switch ( 1 ) { case 0 : default : case await &&= 0 : } 
switch ( 1 ) { case await : default : case 0 : } 
switch ( await &&= 0 ) { case 0 : default : } 
switch ( await ) { } 
switch ( await ?? 0 ) { } 
switch ( await ??= 0 ) { } 
switch ( null ?? await ) { } 
throw 0 ^ ! await ; 
throw 1 && await ; 
throw await ; 
typeof await ; 
var [ , x = await != 0 ] = `` ; 
var [ , x = await ] = `` ; let await ;
var [ ] = 0 ? 0 : await ; 
var [ ] = `${ await }` ; 
var [ ] = await ; 
var [ ] = await ? 0 : 0 ; 
var [ await = await , , ] = `` ; 
var [ x , ... [ x , x = 1n . x = await ] ] = await ; let await = 0 ; 
var [ x , x = await ] = `` ; 
var [ x = 0 in await , ... x ] = '' ; 
var [ x = await , , ... x ] = `` ; 
var [ x = await , ... x ] = '' ; 
var [ x = await << 0 , ... x ] = '' ; 
var [ x = await = 0 , , ... x ] = `` ; 
var [ x = await === 0 , ... x ] = '' ; 
var [ x = await ] = '' ;
var [ x = await ] = `` ; 
var [ x = await ] = `` ; let await ;
var [ x = await in 0 , ... x ] = '' ; 
var [ x = await || ~ 0 , ... x ] = '' ; 
var [ x = typeof await , ... x ] = '' ; 
var x , x = await ; 
var x ; [ ] ( x , await . prototype ) ; 
var x = ! await ; 
var x = ( 1 && await ) ; 
var x = ( await || 0 ) ; 
var x = ( x => 0 ) ( ) [ await ] &&= 0 ;
var x = + await ; 
var x = + await === 0 ; 
var x = - await ++ ; 
var x = - await ; 
var x = 0 != await ; 
var x = 0 & await -- ; 
var x = 0 * await ; 
var x = 0 + await ; 
var x = 0 . x ??= [ ] = await ; 
var x = 0 < await ; 
var x = 0 <= await ; 
var x = 0 == await ; 
var x = 0 === await ; 
var x = 0 > await ; 
var x = 0 >= await ; 
var x = 0 >>> await ; 
var x = 0 ?. x || await ; 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; class await { } 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; function await ( ) { } 
var x = 0 [ await ] ; 
var x = 0 ^ await ; 
var x = 0 instanceof await ; 
var x = 0 | await ; 
var x = 1 && await ; 
var x = `${ await }` ; 
var x = await != 0 ; 
var x = await !== 0 ; 
var x = await & 0 ; 
var x = await && 0 ; 
var x = await &&= 0 ; 
var x = await ( ) ; 
var x = await ( ) === 0 ; 
var x = await ** 0 ; 
var x = await -- ; 
var x = await . x ++ ; 
var x = await . x ; 
var x = await ; 
var x = await ; class await { }
var x = await << 0 ; 
var x = await = 0 ; 
var x = await == 0 ; 
var x = await => { await ; } ; x ( ) ; 
var x = await => { x } ; x ( ) ; 
var x = await >> 0 ; 
var x = await ? 0 : 0 ; 
var x = await ?. x ; 
var x = await ?? 0 ; 
var x = await ??= 0 ; 
var x = await in 0 ; 
var x = await | 1 ; 
var x = true ? await : 0 ; 
var x = typeof await ++ ; 
var x = typeof await ; 
var x = void await ; 
var x = void ~ void await ; 
var x = x %= await ; 
var x = x = await ; 
var x = x = await = 0 ; 
var x = x ?? await ; 
var x = x ||= await ; 
var x = { ... 0 || { [ await -- ] : false } } ; 
var x = { ... await || 0 } ; 
var x = { 0 : 0 . x = await -- } ; 
var x = { 0 : 0 [ 0 ] **= ++ await . x } ; 
var x = { 0 : await != { 1 : 0 } } ; 
var x = { 0 : await -- } ; 
var x = { 0 : await in x } ; 
var x = { 0 : void await in this } ; 
var x = { [ await || 0 ] ( ) { } } ; 
var x = { x = 0 !== await , } = 0 ; 
var x = { x = 0 & await , } = 0 ; 
var x = { x = 0 & { then : await } , } = 0 ; 
var x = { x = 0 . x %= await , } = 0 ; 
var x = { x = 0 . x ??= await , } = 0 ; 
var x = { x = 0 === await , } = 0 ; 
var x = { x = 0 || await , } = 0 ; 
var x = { x = `${ await }` , } = 0 ; 
var x = { x = await !== 0 , } = 0 ; 
var x = { x = await & { } , } = 0 ; 
var x = { x = await && 0 , } = 0 ; 
var x = { x = await , } = 0 ; 
var x = { x = await , } = 0 ; async function * await ( ) { } 
var x = { x = await . x ??= 0 , } = 0 ; 
var x = { x = await < 0 , } = 0 ; 
var x = { x = await ? 0 : 0 , } = 0 ; 
var x = { x = await || 0 , } = 0 ; 
var x = { x = x ?? await , } = 0 ; 
var x = ~ await ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 0 } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 0n } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 1 } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 1n } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => `${ 0 }` } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => null } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => { done : async * function ( x ) { } } } , } = 0 ; 
var { 0 : [ ] = 1n && await , } = 0 ; 
var { 0 : [ ] = await !== 0 } = 0 ; 
var { 0 : [ ] = await . x , } = 0 ; 
var { 0 : [ ] = await ? 0 : 0 } = 0 ; 
var { 0 : [ ] = await } = 0 ; 
var { 0 : [ ] = await } = 0 ; async function * await ( ... x ) { } 
var { 0 : x = await -- } = 0 ; 
var { 0 : x } = await ??= 0 ; 
var { 0 : { } } = `${ { [ Symbol . toPrimitive ] : await => 0 in 0 } }` ; 
var { [ await ] : x , } = 0 ; 
var { [ await ] : x } = 0 ; 
var { await = 0 } = await ; 
var { x , ... x } = { x , get [ await ] ( ) { } } ; 
var { x = ! await } = 0 ; 
var { x = + await } = 0 ; 
var { x = - await } = 0 ; 
var { x = 0 != await } = 0 ; 
var { x = 0 ** await } = 0 ; 
var { x = 0 - await } = 0 ; 
var { x = 0 . x = await } = 0 ; 
var { x = 0 == await } = 0 ; 
var { x = 0 > await } = 0 ; 
var { x = 0 [ await ] } = 0 ; 
var { x = 0 ^ await } = 0 ; 
var { x = 0 | await } = 0 ; 
var { x = [ 1 ] [ 0 ] &&= await } = 0 ; 
var { x = [ ] . x ??= await } = 0 ; 
var { x = `${ await }` } = 0 ; 
var { x = await !== ~ 0 } = 0 ; 
var { x = await %= 0 } = 0 ; 
var { x = await & 0 } = 0 ; 
var { x = await && 0 } = 0 ; 
var { x = await / 0 } = 0 ; 
var { x = await < 0 } = 0 ; 
var { x = await << 0 } = 0 ; 
var { x = await = x => 0 } = 0 ; 
var { x = await == x } = 0 ; 
var { x = await === 0 } = 0 ; 
var { x = await >= 0 } = 0 ; 
var { x = await >> 0 } = 0 ; 
var { x = await >>> 0 } = 0 ; 
var { x = await ? 0 : 0 } = 0 ; 
var { x = await ?. x } = 0 ; 
var { x = await ?? 0 } = 0 ; 
var { x = await in new 0 } = 0 ; 
var { x = await instanceof 0 } = 0 ; 
var { x = await | 0 } = 0 ; 
var { x = await } = 0 ; 
var { x = typeof await } = 0 ; 
var { x = void await } = 0 ; 
var { x = x <= await } = 0 ; 
var { x = x ?? await } = 0 ; 
var { x = ~ await } = 0 ; 
var { x } = '' . x ||= await ; 
var { x } = + ! 0 && await ; 
var { x } = + await ; 
var { x } = - await ; 
var { x } = 0 != await ; 
var { x } = 0 !== await ; 
var { x } = 0 % await ; 
var { x } = 0 - await ; 
var { x } = 0 . x ||= await ( ) ; 
var { x } = 0 in await ; 
var { x } = 0 instanceof await ; 
var { x } = await && 0 ; 
var { x } = await ( ) ; 
var { x } = await ** 0 ; 
var { x } = await . x %= 0 ; 
var { x } = await . x ; 
var { x } = await < 0 ; 
var { x } = await << 0 ; 
var { x } = await <= 0 ; 
var { x } = await = 0 ; class await { } 
var { x } = await = 0 ; function await ( ) { } 
var { x } = await > 0 ; 
var { x } = await >> 0 ; 
var { x } = await >>> 0 ; 
var { x } = await ?. x ; 
var { x } = await instanceof x ; 
var { x } = function ( ) { } ( ) [ await ] ; 
var { x } = typeof await ; 
var { x } = x = await ; 
var { x } = x = await ; class await { } 
var { x } = { x = 1 != await } = 0 ; 
var { x } = { x = await != '' } = 0 ; 
var { x } = { x = await , x } = 0 ; 
var { x } = { x = await === 0 , x } = 0 ; 
var { x } = ~ await ; 
void - await ; 
void 0 [ await ] ; 
void await ; 
while ( 0 ( await ) ) ; 
while ( 0 , x => 0 ) throw await ; 
while ( 0 ? 0 : await ) ; 
while ( 0 [ 0 ] ||= 0 . x ??= await ) ; 
while ( `${ await }` ) for ( var [ x , ] of 0 ) ; 
while ( await ( ... 0 ) ** 0 ) ; class await { } 
while ( await ( ... 0 ) ** 0 ) ; function * await ( ) { } 
while ( await ) ; 
while ( await ) ; class await { } 
while ( await ++ ) break ; 
while ( await ??= 0 ) ; 
while ( function * ( ) { } ( ) [ await ] ) ; 
while ( function * ( ) { } ( ) [ await ] ++ ) ; 
while ( typeof await ) break ; 
x : await : ;
x : await : break x ; 
x : do ; while ( await === 0 ** 0 ) ; 
x : do await ; while ( async function ( ) { } ( ) [ 0 ] -- ) ; 
x : switch ( void await ) { } 
x = 0 [ 0 ] = await ; 
{ [ , ] = { [ Symbol . iterator ] : await => 0 } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => class { } } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => new 0 } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => { } } ; } 
{ await ; } let await = 0 ; ;
{ await ; } var await ;
{ await } ;
{ source : await ; } ; 
{ switch ( await . x ) { } } 
{ switch ( function ( ) { } ( ) [ await ] ) { } } 
{ { await ; } }
~ 0 [ void await ] ; 
~ `${ 0 !== await }` ; 
~ await ; 
