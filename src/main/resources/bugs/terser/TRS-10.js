class x { static #x = #x in 0 - 0 . #x ; } 
class x { static #x = #x in 0 - super . x ; } 
class x { static #x = #x in 0 . #x ** 0 ; } 
class x { static #x = #x in 0 . #x ; } 
class x { static #x = #x in 0 . x . x ; } 
class x { static #x = #x in 0 . x ; } 
class x { static #x = #x in 0 ; } 
class x { static #x = #x in 0 ?. #x ; } 
class x { static #x = #x in 0 ?. [ 0 , 0 . #x ?? 0 ? 0 : 0 . #x ] ; }
class x { static #x = #x in 0 ?. [ 0 , 0 | 0 ? 0 : 0 . #x ] ; }
class x { static #x = #x in 0 ?. [ 0 , super . x ?? 0 ? 0 : 0 . #x ] . #x ; }
class x { static #x = #x in 0 ?. [ 0 . #x ] ; } 
class x { static #x = #x in 0 ?. [ super . x ] ; } 
class x { static #x = #x in 0 ?. x . #x ; } 
class x { static #x = #x in 1n . x ; } 
class x { static #x = #x in `${ 0 }` ?. [ 0 ] ; } 
class x { static #x = #x in `${ 0 }` [ 0 ] ; }
class x { static #x = #x in `` . x ; } 
class x { static #x = #x in `` ?. [ 0 % 0 ] ; } 
class x { static #x = #x in `` ?. [ 0 ] ; } 
class x { static #x = #x in `` [ 0 % 0 ] ; }
class x { static #x = #x in `` [ 0 ] ; }
class x { static #x = #x in new 0 ; } 
class x { static #x = #x in null . x ; } 
class x { static #x = #x in super . x ** 0 ; }
class x { static #x = #x in super . x ; } 
class x { static #x = #x in super [ 0 ] ** 0 ; } 
class x { static #x = #x in true . x ; } 
class x { static #x = #x in typeof 0 . #x ; }
class x { static #x = #x in void 0 . #x ; }
class x { static #x = #x in void super . x ; }
class x { static #x = #x in x ++ ; } 
class x { static #x = #x in x . x ; } 
class x { static #x = #x in x ; } 
class x { static #x = #x in x ?. #x . #x ; } 
class x { static #x = #x in x ?. [ 0 , 0 ? 0 : super . x ] . #x ; }
class x { static #x = #x in { get 0 ( ) { return ; } , } ?. [ 0 ] . #x ; }
class x { static #x = #x in { get 0 ( ) { return ; } , } ?. [ 0 ] . x ; }
class x { static #x = #x in { get 0 ( ) { return ; } , } ?. [ 0 ] ; } 
class x { static #x = #x in { get 0 ( ) { x ( ) ; } , } ?. [ 0 ] . #x ; }
class x { static #x = #x in { get 0 ( ) { x ( ) ; } , } ?. [ 0 ] . x ; }
class x { static #x = #x in { get 0 ( ) { x ( ) ; } , } ?. [ 0 ] ; } 
class x { static #x = #x in { get 0 ( ) { x ( ) ; } , } ?. [ 0 ] [ 0 ] ; }
class x { static #x = #x in { get 0 ( ) { x ( 0 ) ; } , } ?. [ 0 ] ( ) ; }
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] ( ) ; }
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] . #x ; }
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] . x ; }
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] ; } 
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] [ 0 ] ; }
class x { static #x = #x in { set 0 ( x ) { } , } ?. [ 0 ] ; } 
class x { static #x = #x in { x } . x ; } 
class x { static #x = #x in { x } ?. x ?. x ( ) ; } 
class x { static #x = #x in { x } ?. x ?. x ; } 
class x { static #x = 0 | 0 == #x in 0 ?. x [ super [ 0 ] ] ; } 
class x { static #x = 0 || 0 | 0 !== #x in 0 ?. ( ) . #x ; } 
class x { static #x = super [ x === #x in 0 ] ; } 
class x { static #x = #x in super . x % 0 >> 0 . #x ; }
class x { static #x = #x in 0 . #x % 0 >> 0 . #x ; }
class x { static #x = #x in 0 . #x -- ; }
class x { set [ #x in 0 ?. [ x ] ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ #x in { } ^ x <= 0 ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ #x in x ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in 0 % 0 >> super . x ; }
class x { static #x = #x in x >>> 0 ; }
class x { static #x = #x in [ function ( ) { return `` ; } ( ) [ 0 ] . #x ] ; }
class x { static #x = #x in super . x >> 0 . #x ; }
class x { static #x = #x in [ function ( ) { return [ 0 , ] ; } ( ) [ 0 ] . #x ] ; }
class x { static #x = #x in [ function ( ) { } ( ) [ x ] . #x ] ; }
class x { static #x = #x in function ( ) { } ?. ( ) . #x ; }
class x { static #x = #x in [ function ( ) { } ( ) [ 0 . #x ] . #x ] ; }
class x { static #x = #x in x >> 0 . #x ; }
class x { static #x = #x in [ function ( ) { return `${ 0 }${ 0 }` ; } ( ) [ 0 ] . #x ] ; }
class x { static #x = #x in x >> 0 ; }
class x { set [ #x in { } ^ 0 . #x <= 0 ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in 0 ?. #x ?. x ; }
class x { static #x = #x in 0 . #x ++ ; }
class x { static #x = #x in x >>> 0 % 0 . #x ; }
class x { set [ #x in x >> 0 !== 0 ^ 0 <= 0 ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in 0n . x ; }
class x { set [ #x in '' ?. [ 0 % 0 ] ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in [ super . x ] ; }
class x { static #x = #x in [ 0 . #x ] ; }
class x { static #x = #x in 0 . #x ?. x ; }
class x { set [ #x in 0 . #x >> 0 ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ #x in 0 >> x !== 0 ^ 0 <= 0 ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ #x in await ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in [ function ( ) { } ( ) [ 0 ] . #x ] ; }
class x { static #x = #x in [ function ( ) { } ( ) [ super . x ] . #x ] ; }
class x { static #x = #x in 0 ** void super . x ; }
class x { static #x = #x in [ function ( ) { return 0 ; } ( ) [ 0 ] . #x ] ; }
class x { set [ #x in `${ 0 }` ?. [ 0 ] ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ #x in x -- ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ await . #x ] ( x ) { } get #x ( ) { } }
class x { set [ #x in '' ?. [ 0 ] ?? 0 ] ( x ) { } get #x ( ) { } }
class x { static #x = #x in [ function * ( ) { } ( ) [ 0 ] . #x ] ; }
class x { static #x = #x in [ function ( ) { return `` ; } ( ) [ x ] . #x ] ; }
class x { static #x = #x in [ function ( ) { return 0n ; } ( ) [ 0 ] . #x ] ; }
new class { static #x = #x in super . x . #x >>> 0 ; } ;
new class { static #x = #x in super [ true ?. [ super [ 0 ] ] ] ; } ;
new class { static #x = #x in delete 0 . #x ?. x ; } ;
new class { static #x = #x in '' << 0n ; } ;
new class { static #x = #x in { } ?. x ( ) . #x ; } ;
new class { static #x = #x in 1n . #x . #x -- ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 . #x ??= 0 , ] ; } ;
new class { static #x = 0 != #x in ! { } . #x ; } ;
new class { static #x = #x in new 0n . #x ; } ;
new class { static #x = #x in 0 . #x ?. x ; } ;
new class { static #x = #x in - 0 . x . #x ; } ;
new class { static #x = #x in ~ 0 / super [ 0 ] * 1 >= 0 ; } ;
new class { static #x = #x in new 0 . x . x ; } ;
new class { static #x = #x in 0 >>> '' ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in true ?. x } & 0 , ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } % ! 1 ; } ;
new class { static #x = 0 != #x in [ super . x = 0 , ] ; } ;
new class { static #x = #x in 0 . x . #x ( ) >= 0 ; } ;
new class { static #x = #x in typeof true . x ; } ;
new class { static #x = #x in + 0 . x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0n . x . #x , ] ; } ;
new class { static #x = #x in typeof super [ 0 ] . #x ; } ;
new class { static #x = #x in [ ] . #x - 0 ; } ;
new class { static #x = super [ #x in 0 [ 0 ? 0 : 0 . #x ||= 0 ] * 1 ] ; } ;
new class { static #x = #x in super [ 0 ?. #x ( ) ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in x ( ) } ] ; } ;
new class { static #x = #x in 0 [ 0 ] . x . #x ++ ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * 0 . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in ! 0 * `${ 0 }` [ 0 ] . #x . #x ** ~ 0 , ] ; } ;
let x ; new class { static #x = x ??= #x in 0 ; } ;
new class { static #x = #x in - ! 0 ; } ;
new class { static #x = #x in 0 . #x ?. x ?. x ( ) [ 0 ] ** 0 ** ~ 0 ; } ;
new class { static #x = #x in { x } ; } ;
new class { static #x = #x in 0 ** { 0 : 0 } ; } ;
new class { static #x = #x in ~ { } . x ; } ;
new class { static #x = new 0 [ #x in null . #x . x ] . #x ; } ;
new class { static #x = #x in super [ '' ?. x . #x . #x ] ; } ;
new class { static #x = #x in ~ `` . x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 } ] ; } ;
new class { static #x = #x in void super . x . #x ; } ;
new class { static #x = 0 != #x in '' . #x ; } ;
new class { static #x = #x in 0 << { } ; } ;
new class { static #x = #x in super [ 0 ?. [ new null . #x ] . #x ] ; } ;
new class { static #x = #x in typeof new 1n . #x ( ) . x ; } ;
new class { static #x = #x in 0 + ! 0 ; } ;
new class { static #x = #x in 0 >> super [ 0 ] . x ; } ;
new class { static #x = #x in ! 0 / 1 >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ super . x . x ] . #x ] ; } ;
let x ; new class { static #x = x ??= #x in super . x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in 0 % delete 0 / ~ 0 & 0 , ] ; } ;
new class { static #x = 0 != #x in 0 ; } ;
new class { static #x = super [ #x in 1n . #x ] ; } ;
new class { static #x = #x in new function ( ) { return ; } ; } ;
new class { static #x = #x in 0 >> 0 . x . x ; } ;
new class { static #x = #x in 0 . x [ 0 ] >= 0 ; } ;
new class { static #x = #x in [ super . x . #x ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in 0 . x . x } & 0 , ] ; } ;
new class { static #x = #x in super [ 0 ] [ 0 ] . #x - 0 ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : async x => 0 } >> super . x ] . #x . #x ; } ;
new class { static #x = #x in super [ '' ?. #x ] ; } ;
new class { static #x = #x in void super [ 0 . #x ] ; } ;
new class { static #x = #x in `${ #x in new 0 }` >= 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in 0 . #x } & 0 , ] ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in super . x ( ) - 0 ] ] !== 0 ; } ;
new class { static #x = new 0 [ #x in null . #x ] . #x ; } ;
new class { static #x = #x in 0 << super [ x ] ; } ;
new class { static #x = #x in + import ( 0 . x ??= super [ 0 ] ) ; } ;
new class { static #x = super . x [ super [ 0 , #x in x , [ , ] ] *= 0 ] . #x ; } ;
new class { static #x = #x in super . x -- ; } ;
new class { static #x = #x in 0n % ! 0 ; } ;
new class { static #x = new x [ 0 ] . #x ; } ; let x ;
new class { static #x = #x in ! { x } ; } ;
new class { static #x = #x in 0 . x [ 0 ] ** ~ + 0 ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in function * ( ) { } ( ) . #x ?. x , ] ; } ;
new class { static #x = #x in + x ; } ;
new class { static #x = new 0 [ #x in 1n . x ] . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => 0 . #x } ] ; } ;
new class { static #x = #x in x ++ ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in 0 ?. x , ] ; } ;
new class { static #x = #x in true . #x `` [ 0 ] -- ; } ;
new class { static #x = super [ #x in 0 ^ 0 ] >= 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in function ( ) { } ( ) . #x ; } } % ! 1 ; } ;
new class { static #x = { [ #x in { } ?? 0 ] : false } ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 , ] ; } ;
new class { static #x = #x in super [ 0 ?. #x . #x [ 0 ] ] ; } ;
new class { static #x = #x in 1 ** super . x . #x ; } ;
new class { static #x = #x in 0 % null ; } ;
new class { static #x = #x in x - 0 ; } ;
new class { static #x = 0 . #x = #x in class { } && 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in new 0 ] . #x ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super . x >> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in 0 ?. [ '' ] . #x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in ! typeof `` . #x ; } ;
new class { static #x = #x in 0 . x >> 0 ; } ;
new class { static #x = #x in new new 0 . #x ; } ;
new class { static #x = #x in void '' . #x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = this . #x `` , ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 1n . x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in super . x + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ x ] . #x ] ; } ; let x ;
new class { static #x = #x in x . #x . x ; } ;
new class { static #x = #x in { x } + 0 ; } ;
new class { static #x = #x in super [ '' ] ; } ;
new class { static #x = #x in null - 0 ; } ;
new class { static #x = #x in `${ 0 [ 0 ] . #x }` ; } ;
new class { static #x = #x in [ ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in `` . #x ] . #x ; } ;
new class { static #x = #x in function ( ) { } ( ) ( ... 0 ) >= 0 ; } ;
new class { static #x = #x in 0 ?. [ new super [ 0 ] ( ) ] . #x ; } ;
new class { static #x = #x in 0 + super . x ; } ;
new class { static #x = #x in + 1n . #x ; } ;
new class { static #x = #x in this ; } ;
new class { static #x = #x in 1n ?. x . x . #x ; } ;
new class { static #x = #x in ! 0 % 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 1n . #x `` `` , ] ; } ;
new class { static #x = #x in 0 >>> function * ( ) { } ( ) . #x ** 0 ; } ;
new class { static #x = #x in + new 0 . #x ( ) ; } ;
new class { static #x = #x in 1 ** 0 ** ~ 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 . #x , ] ; } ;
new class { static #x = #x in typeof this ; } ;
new class { static #x = #x in 0 >> '' . #x . #x ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : { } } >> super . x ] . #x . #x ; } ;
new class { static #x = #x in void super [ null ] ; } ;
new class { static #x = #x in 0 . #x `` ** ~ + 0 ; } ;
new class { static #x = #x in 0 . #x ?. x + 0 . #x ; } ;
new class { static #x = #x in void 0 . #x . #x ; } ;
new class { static #x = #x in ! true ; } ;
new class { static #x = 0 [ #x in { x , } ] ; } ;
new class { static #x = #x in 0 >>> 0 . #x ; } ;
new class { static #x = #x in `` . #x [ 0 ] >= 0 ; } ;
new class { static #x = #x in 1 ** 0 . #x ; } ;
new class { static #x = #x in 0 << null . #x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in 0 . #x , ] ; } ;
new class { static #x = #x in super . x ++ ; } ;
new class { static #x = new 0 [ #x in true . #x ] . #x ; } ;
new class { static #x = #x in { x } . #x -- ; } ;
new class { static #x = #x in '' ?. x % 0 ; } ;
new class { static #x = #x in super [ true ?. #x [ 0 ] . #x ] ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : x => 0 } }` >= 0 ; } ;
new class { static #x = #x in typeof x ; } ;
new class { static #x = #x in void null . #x ; } ;
new class { static #x = 0 != #x in super . x ; } ;
new class { static #x = #x in typeof x . #x ; } ; let x ;
new class { static #x = #x in 0 - 0 ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : x => 0 } >> super . x ] . #x . #x ; } ;
new class { static #x = #x in super . x >= 0 ; } ;
new class { static #x = super [ #x in { } . #x ] ; } ;
new class { static #x = #x in + { x } . #x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >>> super [ 0 ] >>> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in function ( ) { } ( ) ( ) >= 0 ; } ;
new class { static #x = #x in 0 * { x } . #x ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ 1n ] ; } ;
new class { static #x = #x in '' << 0 ; } ;
new class { static #x = #x in super [ new 0 ] ; } ;
new class { static #x = #x in 0 - [ ] ; } ;
new class { static #x = 0 != #x in [ #x in [ ] <= 0 , ] ; } ;
new class { static #x = #x in 0 % 0 + 0 ; } ;
new class { static #x = #x in `${ { [ [ ] . x . #x ] : x } }` >= 0 ; } ;
new class { static #x = this >= super [ x ^ 0 === #x in 0 ] ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in { } ] ; } ;
new class { static #x = #x in [ ] . #x `` ** ~ + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ x . #x . x ] . #x ] ; } ;
new class { static #x = #x in ~ 0 . #x . #x / 0 * 1 >= 0 ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in super . x . x ( ) } ] ; } ;
new class { static #x = #x in x . x ( ) >= 0 ; } ;
new class { static #x = #x in super . x [ 0 ] ?. x ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0n ] ] ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in x ] ; } ;
new class { static #x = #x in - 0 ; } ;
new class { static #x = #x in '' << x ; } ;
new class { static #x = #x in `${ 0 }` ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : function ( ) { } } >> super . x ] . #x . #x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ! 0 / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = #x in typeof new 0 . #x ( ) . x ; } ;
new class { static #x = #x in 0 << 0 ; } ;
let x ; new class { static #x = #x in super [ 0 ?. x [ x ] . #x ] ; } ;
new class { static #x = #x in ~ 0 . x . #x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 [ 0 ] . x ] . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 < 0 ] ] ] ; } ;
new class { static #x = { [ #x in '' . #x ?? 0 ] : x } ; } ;
new class { static #x = #x in super [ 0 ?. x [ #x in 0 . #x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ new 0 . #x ] . #x ] ; } ;
new class { static #x = #x in ~ function ( ) { } ( ) . #x ; } ;
new class { static #x = #x in 0 [ 0n ] ; } ;
new class { static #x = #x in new [ ] ( ) ; } ;
new class { static #x = #x in 0 << ~ 0 ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ '' ] ; } ;
new class { static #x = #x in + super . x . #x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . x . x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in 0 - 0 . x . #x ] ] !== 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ `` ] . #x ] ; } ;
new class { static #x = #x in '' . #x ( ) >= 0 ; } ;
new class { static #x = #x in 0 << 0 . #x . #x ; } ;
new class { static #x = #x in true ?. x ?. x ; } ;
let x ; new class { static #x = x ??= #x in 0 . #x ; } ;
new class { static #x = #x in 0 << super . x . #x ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ null ] ; } ;
new class { static #x = 0 != #x in [ 0n . #x `` , ] ; } ;
new class { static #x = 0 != #x in true . #x ; } ;
new class { static #x = #x in 0 >>> ~ 0 ; } ;
new class { static #x = #x in new 0 - 0 ; } ;
new class { static #x = #x in [ #x in [ ] , , ] >= { [ Symbol . toPrimitive ] : async function ( ) { } } ; } ;
new class { static #x = #x in ! 0n ; } ;
new class { static #x = #x in void 0 ( ) ; } ;
new class { static #x = #x in - 0 . #x . #x ; } ;
new class { static #x = #x in 0 ; } ;
new class { static #x = #x in 0 ?. [ 0 [ 0 ] . x . #x ] . #x ; } ;
new class { static #x = #x in async function * ( ) { } ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in 0 . x ] ] ] ; } ;
new class { static #x = #x in typeof null . #x . #x ; } ;
new class { static #x = #x in + class extends super [ { [ Symbol . toPrimitive ] : async x => 0 } ] { ; } ; } ;
new class { static #x = #x in 0 [ false ] ; } ;
new class { static #x = #x in '' % 1n ; } ;
new class { static #x = #x in ~ '' . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in [ ] % 0 ; } ;
new class { static #x = super [ #x in 0 [ 0 ? 0 : super . x ||= 0 ] * 0n ] ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * `` . #x . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = #x in true . #x >> 0 ; } ;
new class { static #x = 0 ^ 0 | #x in new 0 ?? 0 ; } ;
new class { static #x = #x in 0 >>> null ; } ;
let x ; new class { static #x = x ??= #x in x ; } ;
new class { static #x = #x in null . #x << 0 ; } ;
new class { static #x = #x in { } . #x [ 0 ] >= 0 ; } ;
new class { static #x = #x in '' . x -- ; } ;
new class { static #x = #x in { } >= { [ Symbol . toPrimitive ] : this } ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in 0 ?. x . x ] ; } ;
new class { static #x = #x in [ 0 , , ] ; } ;
new class { static #x = #x in 0 << '' . #x ; } ;
new class { static #x = #x in super [ 0 ] < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in + class extends super [ null ] { ; } ; } ;
new class { static #x = #x in { x } . #x >> 0 ; } ;
new class { static #x = #x in ! 0 ( ) . #x / 1 >= 0 ; } ;
new class { static #x = #x in 1 ** ~ 0 ; } ;
new class { static #x = #x in 0 ?. [ null . #x ] . #x ; } ;
new class { static #x = #x in { } + { [ Symbol . toPrimitive ] : false } ; } ;
new class { static #x = #x in 0 ?. x ?. x ; } ;
new class { static #x = #x in 0 >> '' . #x ; } ;
new class { static #x = 0 . #x = #x in x && 0 ; } ;
new class { static #x = #x in 0n . #x . #x ++ ; } ;
new class { static #x = #x in new 0 >> 0 ; } ;
new class { static #x = 0 [ #x in 0 ] ; } ;
new class { static #x = #x in '' . #x `` ; } ;
new class { static #x = #x in new { } . #x ; } ;
new class { static #x = #x in [ #x in 0 . x . #x , , ] >= 0 ; } ;
new class { static #x = #x in typeof new 0 . #x [ 0 ] ( ) . x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in super . x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in `${ super . x . #x }` ; } ;
new class { static #x = #x in 0 >> ! 0 ; } ;
new class { static #x = #x in `${ 0n }` ; } ;
new class { static #x = #x in super . x ** ~ + 0 ; } ;
new class { static #x = #x in ~ 0 >> 0 ; } ;
new class { static #x = #x in ~ super . x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in + class extends super [ 0n ] { ; } ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 . #x ] ] . #x ] ; } ;
new class { static #x = #x in x . #x -- ; } ;
new class { static #x = #x in 0 * super . x . #x ; } ;
new class { static #x = #x in new 0 >= 0 ; } ;
new class { static #x = #x in 0 >> null ; } ;
new class { static #x = #x in typeof super [ 0 ] . x ?. x ; } ;
new class { static #x = super . x [ super [ 0 , #x in { } , `` ] *= 0 ] . #x ; } ;
new class { static #x = #x in typeof 1n ; } ;
new class { static #x = #x in super [ 0 ?. x [ [ ] . #x . x ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in 0 . x , ] ; } ;
new class { static #x = #x in - x . #x ; } ;
new class { static #x = super [ #x in 1n . #x `` * 1 ] ; } ;
new class { static #x = #x in `${ #x in 0 . #x }` >= 0 ; } ;
new class { static #x = #x in 0n ?. x . #x ( ) . #x ; } ;
new class { static #x = #x in ~ x ; } ;
new class { static #x = #x in super [ 0 ?. [ 0 . #x ] ] ; } ;
new class { static #x = super [ #x in super . x % { [ super . x &&= 0 ] : '' } ] ; } ;
new class { static #x = #x in super [ '' ?. [ 0 ] ] ; } ;
new class { static #x = #x in 0 - { [ Symbol . toPrimitive ] : null } ; } ;
new class { static #x = super [ #x in true . #x ?. x ] ; } ;
new class { static #x = #x in typeof { x } ; } ;
new class { static #x = #x in super [ 0 ?. x [ x ] . #x ] ; } ; var x ;
new class { static #x = #x in ! 1 ; } ;
new class { static #x = #x in 0n . #x `` [ 0 ] -- ; } ;
new class { static #x = #x in typeof 0n . #x ?. x ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in 0 . x ] . #x ] ; } ;
new class { static #x = #x in 0 . x . #x - 0 ; } ;
new class { static #x = 0 . #x = #x in 0 && 0 ; } ;
new class { static #x = #x in + import ( 0 . #x . x ??= 0 ) ; } ;
new class { static #x = #x in 0 * 0 . x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in new 0 > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in `` . #x . #x -- ; } ;
new class { static #x = super . x ?. x != #x in { } ; } ;
new class { static #x = #x in super [ function ( ) { } ?. ( ) . x . #x ] ; } ;
new class { static #x = #x in 0 ?. x . #x . x . #x ; } ;
new class { static #x = #x in 0 * - + 0 >= 0 ; } ;
new class { static #x = #x in function ( ) { } ; } ;
new class { static #x = #x in { x } . #x - 0 ; } ;
new class { static #x = #x in typeof 0 . x . #x . #x ; } ;
new class { static #x = 0 != #x in [ #x in 0 . x <= 0 , ] ; } ;
new class { static #x = #x in 0 ?. [ { [ Symbol . toPrimitive ] : null } ] . #x ; } ;
new class { static #x = #x in ! void 0 ; } ;
new class { static #x = #x in true ; } ;
new class { static #x = 0 != #x in x ; } ;
new class { static #x = super . x [ super [ 0 , #x in true . #x , [ , ] ] *= 0 ] . #x ; } ;
new class { static #x = #x in ~ 1n . x ; } ;
new class { static #x = #x in async function x ( ) { } ; } ;
new class { static #x = super [ #x in new . target [ 0 , 0 ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ 0 . #x `` ] ] ; } ;
new class { static #x = super [ #x in 0n % 1n ] ; } ;
new class { static #x = #x in [ ] . #x . #x ++ ; } ;
new class { static #x = #x in 0 % ! 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x . #x , ] ; } ;
new class { static #x = #x in function * x ( ) { } ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : '' } ] ; } ;
new class { static #x = #x in 0 . #x << 0 ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0n . #x ] . #x ; } ;
new class { static #x = #x in super [ 0n ?. #x [ 0 ] . #x ] ; } ;
new class { static #x = #x in + class extends super [ x ] { ; } ; } ;
new class { static #x = #x in ! { } ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in 0 . x , ] ; } ;
new class { static #x = #x in 0 ?. [ 0 . #x ] . #x ; } ;
new class { static #x = #x in `${ #x in [ ] }` >= 0 ; } ;
new class { static #x = #x in new 0 . #x ; } ;
new class { static #x = #x in super [ 0 ?. #x [ 0 ] ] ; } ;
new class { static #x = #x in 0 ?. [ 0 . x . #x ] . #x ; } ;
new class { static #x = 0 != #x in ! true . #x ; } ;
new class { static #x = #x in 0 << new 0 ; } ;
new class { static #x = #x in 0 ** ~ 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in [ ] ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in new . target ; } } % ! 1 ; } ;
new class { static #x = #x in 0 ?. [ super . x ] . #x ; } ;
new class { static #x = #x in + class extends super [ ! 0 ] { ; } ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super . x ; } } % ! 1 ; } ;
new class { static #x = #x in 0 + x . #x ; } ;
new class { static #x = #x in 1 ** 0 . #x . #x ; } ;
new class { static #x = #x in `${ #x in super . x }` >= 0 ; } ;
new class { static #x = new 0 [ #x in 0 . #x ] . #x ; } ;
new class { static #x = 0 != #x in [ #x in super . x <= 0 , ] ; } ;
new class { static #x = #x in null ?. x ; } ;
new class { static #x = #x in 0 . x . x + 0 ; } ;
new class { static #x = #x in 0 . #x `` ; } ;
new class { static #x = #x in typeof new null . #x . #x ( ) ; } ;
new class { static #x = #x in typeof { } . #x . #x ; } ;
new class { static #x = super [ #x in `` . #x `` * 1 ] ; } ;
new class { static #x = new 0 [ #x in x ] . #x ; } ;
let x ; new class { static #x = x ??= #x in 0 [ 0 ] . #x ; } ;
new class { static #x = #x in ~ new super . x ( ) / 0 / 1 >= 0 ; } ;
new class { static #x = #x in { x } < 0 ; } ;
new class { static #x = super [ #x in 0n . x . x . #x ?. x ] ; } ;
new class { static #x = #x in 0 >>> new 0 ; } ;
new class { static #x = #x in 0n . #x ** ~ 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in `${ 0 , 0 }` . #x , ] ; } ;
new class { static #x = #x in + class extends super [ super . x ] { ; } ; } ;
new class { static #x = #x in { } . #x `` . x ; } ;
new class { static #x = new x . #x . #x ; } ; let x ;
 > Expected throw-error: ReferenceError(DeclarativeEnvironmentRecord.GetBindingValue<SYNTAX>:MemberExpression[7,0].Evaluation) but got throw-error: TypeError(unnamed:3: TypeError: Cannot read properties of undefined (reading '#x')) */
new class { static #x = #x in 0 >>> super . x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in new 0 ; } } % ! 1 ; } ;
new class { static #x = #x in 0 * '' . #x ; } ;
new class { static #x = #x in 1n . x . #x ; } ;
new class { static #x = new 0 [ #x in new 0 . #x ( ) `` . #x ] . #x ; } ;
new class { static #x = #x in [ ] . #x < 0 in 0 >= - 0 ; } ;
new class { static #x = 0 ^ 0 | #x in null . x ?? 0 ; } ;
new class { static #x = #x in delete 0 . #x . x ; } ;
new class { static #x = 0 != #x in ! '' . #x ; } ;
new class { static #x = #x in ~ null . #x ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in new 0 ] ] !== 0 ; } ;
new class { static #x = super [ #x in true . #x ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in '' . #x } & 0 , ] ; } ;
new class { static #x = #x in true . #x << 0 ; } ;
new class { static #x = #x in new [ 0 , ] [ 0 ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in 0 , ] ; } ;
new class { static #x = #x in ~ null ; } ;
new class { static #x = #x in 0 ?. [ 0 . #x . #x ] . #x ; } ;
new class { static #x = #x in void 0 % 0 ; } ;
new class { static #x = #x in function ( ) { } ( ) . #x >= 0 ; } ;
new class { static #x = #x in async function * ( ) { } ( ) ?. x ; } ;
new class { static #x = super [ #x in super . x ] ; } ;
new class { static #x = #x in 0 << 0 . #x ; } ;
new class { static #x = #x in void super [ ! 0 ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in super . x instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in void 0 . x . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ new . target ] . #x ] ; } ;
new class { static #x = 0 ^ 0 | #x in 0 . x ?? 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ! super . x . #x / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = #x in 0 << '' ; } ;
new class { static #x = #x in - `` ; } ;
new class { static #x = #x in x ?. x ; } ;
new class { static #x = #x in `` . x . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in super [ 0 ] . #x } ] ; } ;
new class { static #x = #x in true . #x - 0 ; } ;
new class { static #x = #x in super [ '' ?. [ 0 ] . #x ] ; } ;
new class { static #x = #x in delete true . x ; } ;
new class { static #x = #x in [ 0 . #x , ] ; } ;
new class { static #x = #x in x ; } ;
new class { static #x = #x in { ... 0 , } >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in super [ 0 ] . x ] ] . #x ] ; } ;
new class { static #x = #x in 0 ** { [ Symbol . toPrimitive ] : null } ; } ;
new class { static #x = super [ #x in { } . #x `` ?. x ] ; } ;
new class { static #x = super . x [ super [ 0 , #x in 0 . #x , `` ] *= 0 ] . #x ; } ;
new class { static #x = #x in typeof new super . x ; } ;
new class { static #x = #x in 0 * 0 . x . x ; } ;
new class { static #x = #x in 0 ?. #x . x . #x ; } ;
new class { static #x = #x in `${ { [ { x , } . #x ] : x } }` >= 0 ; } ;
new class { static #x = 0 != #x in [ #x in `${ 0 }` . x <= 0 , ] ; } ;
new class { static #x = #x in + x . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in x ] . #x ] ; } ;
new class { static #x = #x in new '' . #x ; } ;
new class { static #x = #x in 0 ?. ( 0 , ) . #x . x . #x ; } ;
new class { static #x = #x in ! 0 >> 0 ; } ;
let x ; new class { static #x = x ??= #x in [ ] ; } ;
new class { static #x = #x in 0 - 0 ** ~ 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ x ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in ! 0 * 0 [ 0 ] . #x . #x ** ~ 0 , ] ; } ;
new class { static #x = #x in [ { x } . #x ] ; } ;
new class { static #x = #x in void true . #x ; } ;
new class { static #x = super [ #x in 0 ( 0 , ... x , ) ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . x . x ] . #x ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in [ ] > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in 0 . #x , ] ; } ;
new class { static #x = super [ #x in `` . #x ?. x ] ; } ;
new class { static #x = #x in true . #x `` ; } ;
new class { static #x = super [ #x in `` . #x ] ; } ;
new class { static #x = #x in 1n >> 0n ; } ;
new class { static #x = new 0 [ #x in { } . x ] . #x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in [ ] } & 0 , ] ; } ;
new class { static #x = #x in 0 % `` ; } ;
new class { static #x = #x in x . #x `` ; } ;
new class { static #x = #x in true . x -- ; } ;
new class { static #x = super [ x ] . #x ; } ; let x ;
 > Expected throw-error: ReferenceError(DeclarativeEnvironmentRecord.GetBindingValue<SYNTAX>:SuperProperty[0,0].Evaluation) but got throw-error: TypeError(unnamed:3: TypeError: Cannot read properties of undefined (reading '#x')) */
new class { static #x = #x in 0 >> 0 ( ) . #x ; } ;
new class { static #x = #x in { } . x -- ; } ;
new class { static #x = #x in super [ 0 ?. x [ super . x ] ] ; } ;
new class { static #x = #x in 1 ** + super . x ; } ;
new class { static #x = #x in new 0 . x ; } ;
new class { static #x = #x in x ( ) >= 0 ; } ;
new class { static #x = #x in x . x ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in null . x ] . #x ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : null } ** 0 ** ~ 0 ; } ;
new class { static #x = #x in { } ?. x % 0 ; } ;
new class { static #x = #x in 1n . #x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ #x in 0 ?. x ] . #x ] ; } ;
new class { static #x = #x in 0 / 0 . #x [ 0 ] ; } ;
new class { static #x = #x in 0 << 0 . x . #x ; } ;
new class { static #x = #x in 0 + 0 . #x . #x ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * true . #x ** ~ 0 , ] ; } ;
new class { static #x = #x in new function ( ) { x ( 0 ) ; } ( ) ; } ;
new class { static #x = super [ #x in 1n / 0n ] ; } ;
new class { static #x = #x in function * ( ) { } ( ) [ 0 ] ; } ;
new class { static #x = #x in 0 >> 0 ; } ;
new class { static #x = 0 != #x in ! 0 . x . #x ; } ;
new class { static #x = 0 != #x in [ this . #x `` `` , ] ; } ;
new class { static #x = #x in x << 0 ; } ;
new class { static #x = #x in `` . #x >>> 0 ; } ;
new class { static #x = #x in 0 [ { x , } ] ; } ;
new class { static #x = #x in [ new 0 ] ; } ;
new class { static #x = #x in 0 ** 0 ; } ;
new class { static #x = #x in async function ( ) { } ; } ;
new class { static #x = #x in { x } . #x ** ~ 0 ; } ;
new class { static #x = #x in 1 ** super . x ; } ;
new class { static #x = #x in typeof 0 . x . #x ; } ;
new class { static #x = #x in new 0 . x [ 0 ] ( ) ; } ;
new class { static #x = #x in 0 ?. x . #x ; } ;
new class { static #x = #x in 0 . x >= 0 ; } ;
new class { static #x = #x in new super . x ( ) ; } ;
new class { static #x = #x in 0 . x . #x . #x -- ; } ;
new class { static #x = #x in 0 [ [ ] ] ; } ;
new class { static #x = super [ #x in 0n . #x `` ?. x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ 1n . #x . x ] . #x ] ; } ;
new class { static #x = #x in + 0 ( ) . #x ; } ;
new class { static #x = #x in 0 + x ; } ;
new class { static #x = #x in { } ?. x . #x ; } ;
new class { static #x = 0 [ 0 ] . #x ?. x != #x in { } ; } ;
new class { static #x = #x in typeof null . #x ?. x ; } ;
new class { static #x = #x in 0 + 0 . x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in super . x } & 0 , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 [ 0 ] . x ] ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 ] ] ] ; } ;
new class { static #x = #x in 0 << super [ 0 . #x ??= 0 , 0 ] ; } ;
new class { static #x = #x in 0n . #x `` + 0 ; } ;
new class { static #x = #x in void super [ 0n ] ; } ;
new class { static #x = #x in `${ 0 > 0 }` ; } ;
new class { static #x = #x in super [ 0 ?. x [ #x in this ] . #x ] ; } ;
new class { static #x = #x in null . #x ; } ;
new class { static #x = #x in `${ { } . #x }` ; } ;
new class { static #x = #x in delete 0 . x ; } ;
new class { static #x = #x in 0 >> super . x . #x ; } ;
new class { static #x = #x in 0 . #x ( ) ; } ;
new class { static #x = #x in [ 0 ] [ 0 ] ; } ;
new class { static #x = #x in 0 . x -- ; } ;
new class { static #x = #x in ~ super . x . #x . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in typeof 1n . #x `` ; } ;
new class { static #x = 0 != #x in [ #x in { x } <= 0 , ] ; } ;
new class { static #x = #x in - super . x ; } ;
new class { static #x = #x in [ #x in 1n . #x , , ] >= 0 ; } ;
new class { static #x = #x in 0 * null . #x ; } ;
new class { static #x = #x in 0 ( ) [ 0 ] ; } ;
new class { static #x = #x in 0 << '' . #x . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ #x in new 0 ] . #x ] ; } ;
new class { static #x = #x in void x . #x ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in ! 0 * super . x . #x ?. x ** 0 , ] ; } ;
new class { static #x = #x in { } ?. x . #x . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ null ] ] ] ; } ;
new class { static #x = #x in + 0 ; } ;
new class { static #x = #x in class { } ; } ;
new class { static #x = #x in ~ new 0 . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in delete 0 . x . x ; } ;
new class { static #x = 0 != #x in [ 0 . #x %= 0 , ] ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ new 0 ] ; } ;
new class { static #x = #x in 0 >> null . #x . #x ; } ;
new class { static #x = #x in 1n . x ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ 0 . x ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in true . #x >> 0 instanceof 0 ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in 0n . x ] ] . #x ] ; } ;
new class { static #x = #x in { } . #x ; } ;
new class { static #x = #x in 0 >>> 0 ; } ;
new class { static #x = #x in 0 - new 0 ; } ;
new class { static #x = #x in 0 + 1n ; } ;
new class { static #x = #x in 0 . #x . #x . x ; } ;
new class { static #x = #x in super . x . #x - 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 . x . x . #x , ] ; } ;
new class { static #x = #x in 0 [ `` ] ; } ;
new class { static #x = #x in 0 + { } ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . #x ] . #x ; } ;
new class { static #x = #x in super [ true ?. x . #x . #x ] ; } ;
new class { static #x = #x in ~ 0 / 0 ; } ;
new class { static #x = #x in x + 0 ; } ;
new class { static #x = #x in + 0 . #x ; } ;
new class { static #x = 0 ^ 0 === #x in 0 ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : function ( ) { } } }` >= 0 ; } ;
new class { static #x = #x in void super [ `` ] ; } ;
new class { static #x = #x in 0 >> 0 . x . #x . #x ; } ;
new class { static #x = #x in super [ '' ?. [ super [ 0 [ x ] ] ] ] ; } ;
new class { static #x = #x in 0 ** 0 ** super . x >= 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in [ ] , ] ; } ;
new class { static #x = 0 != #x in [ null . #x , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ { } ] ] ] ; } ;
new class { static #x = #x in 0 ?. #x . #x ; } ;
new class { static #x = #x in super . x ?. x ; } ;
new class { static #x = #x in [ #x in [ ] , , ] >= { [ Symbol . toPrimitive ] : { } } ; } ;
new class { static #x = #x in { x , } ; } ;
new class { static #x = #x in 0 ?. ( ) [ 0 ] . #x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in ! typeof true . #x ; } ;
new class { static #x = #x in + class extends super [ 0 [ 0 ] . #x ] { ; } ; } ;
new class { static #x = #x in async function * x ( ) { } ; } ;
new class { static #x = super . x [ 0 | 0 == #x in true . #x ] . #x ; } ;
new class { static #x = #x in void super [ 0 ] ; } ;
new class { static #x = #x in super [ function * ( ) { } ?. ( ) [ 0 ] . #x ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : function * ( ) { } } ** 0 ; } ;
new class { static #x = #x in new 0 . x ( ) ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >> super [ 0 ] ; } } % ! 1 ; } ;
new class { static #x = #x in { } ?. x . #x ( ) . #x ; } ;
new class { static #x = super [ #x in 0 . #x `` * 1 ] ; } ;
new class { static #x = { [ #x in true . #x ?? 0 ] : false } ; } ;
new class { static #x = #x in 0 >> 0 . x ; } ;
new class { static #x = #x in - { x } ; } ;
new class { static #x = #x in - 0 !== 0 == [ ] ; } ;
new class { static #x = #x in null . #x [ 0 ] >= 0 ; } ;
new class { static #x = #x in 0 % [ ] ; } ;
new class { static #x = #x in null . #x `` ** ~ + 0 ; } ;
new class { static #x = #x in { x } [ 0 ] ; } ;
new class { static #x = #x in 0 ** typeof 0 ; } ;
new class { static #x = #x in + super . x ; } ;
new class { static #x = #x in null ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ { x } ] ] ] ; } ;
new class { static #x = #x in ! 0 << 0 ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ true ] ; } ;
new class { static #x = 0 ^ 0 | #x in x ?? 0 ; } ;
new class { static #x = #x in + true . #x ; } ;
new class { static #x = #x in `${ [ ] . #x `` }` ; } ;
new class { static #x = #x in [ #x in 1 * 0 ** ~ void 0 , , ] >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in { } ] ] . #x ] ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * true . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = #x in { 1 : '' } ; } ;
new class { static #x = 0 != #x in [ #x in [ ] , ] ; } ;
new class { static #x = #x in super . x . #x . x -- ; } ;
new class { static #x = #x in 0 ( ) ?. x ; } ;
new class { static #x = #x in function ( x , [ ] ) { } ( ) ; } ;
new class { static #x = #x in ! 1n ; } ;
new class { static #x = #x in super . x . #x -- ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in '' . x , ] ; } ;
new class { static #x = #x in function ( ) { } ( ) ?. x ; } ;
new class { static #x = #x in super [ 0 ?. [ new this . #x ] . #x ] ; } ;
new class { static #x = #x in - '' . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => new 0 ( ) . #x } ] ; } ;
new class { static #x = #x in 0n >>> 0 ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in '' ?. x , ] ; } ;
new class { static #x = #x in `` . x . #x - 0 ; } ;
new class { static #x = #x in this ?. ( ) . #x ; } ;
new class { static #x = 0 != #x in [ 0 & #x in new 0 , ] ; } ;
new class { static #x = #x in super [ { } ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in new 0 } & 0 , ] ; } ;
new class { static #x = #x in ~ 0 / 0 % 1 >= 0 ; } ;
new class { static #x = #x in + import ( 0 . #x ??= 0 ) ; } ;
new class { static #x = #x in super [ function ( ) { } ( ) . #x ||= 0 ] >= 0 ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * 0 . #x ** ~ 0 , ] ; } ;
new class { static #x = 0 . #x . #x ?. x != #x in { } ; } ;
new class { static #x = #x in 0 >>> { } ; } ;
new class { static #x = #x in 0 ?. x . x ( ) . #x ; } ;
new class { static #x = #x in [ 0 ( ) . #x ] ; } ;
new class { static #x = #x in 0 ?. x . x . #x ; } ;
new class { static #x = #x in false << 0 ; } ;
new class { static #x = #x in typeof true . #x ?. x ; } ;
new class { static #x = #x in 0 ?. ( ) . #x ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in x ] ] !== 0 ; } ;
new class { static #x = #x in typeof 0n . x ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : #x in 0 } }` >= 0 ; } ;
new class { static #x = #x in 0 ?. [ x . #x ] . #x ; } ;
new class { static #x = #x in 0 ?. x . x . #x ( ) . #x ; } ;
new class { static #x = #x in 0 ?. [ '' . #x ] . #x ; } ;
new class { static #x = #x in + class extends super [ 0 . x ] { ; } ; } ;
new class { static #x = #x in super [ 0 ?. x [ super . x ] . #x ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => super . x . #x } ] ; } ;
new class { static #x = #x in 0n . #x >>> 0 ; } ;
new class { static #x = #x in 0 . x + 0 ; } ;
new class { static #x = 0 != #x in ! 0 . #x . #x ; } ;
new class { static #x = #x in typeof '' . #x `` ; } ;
new class { static #x = #x in 1 ** `` . #x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ** 0 ; } ;
new class { static #x = 0 != #x in ! 0 . x ; } ;
new class { static #x = #x in function ( ) { } ?. ( ) . #x ; } ;
new class { static #x = #x in ~ 0 ( ) . #x ; } ;
new class { static #x = #x in 0 . x >>> 0 ; } ;
new class { static #x = #x in void 0n . #x ; } ;
new class { static #x = super [ #x in { } . #x `` * 1 ] ; } ;
new class { static #x = #x in void { x } . #x ; } ;
new class { static #x = #x in 0 . x . x ++ ; } ;
new class { static #x = #x in - 0 . x ; } ;
new class { static #x = #x in super . x >> 0 ; } ;
new class { static #x = #x in [ #x in 0 . x , , ] >= 0 ; } ;
new class { static #x = #x in 0 ?. x % 0 ; } ;
new class { static #x = #x in `` + 0 ; } ;
new class { static #x = super [ #x in new 0 . #x . x ( ) * 0n ] ; } ;
new class { static #x = #x in typeof `` . x ; } ;
new class { static #x = #x in `` + null ; } ;
new class { static #x = #x in null + 0 ; } ;
new class { static #x = #x in 1 ** 0 . #x ** ~ 0 ; } ;
new class { static #x = #x in new 0 ** ~ 0 ; } ;
new class { static #x = #x in `${ 0 . #x `` }` ; } ;
new class { static #x = #x in ~ 0 / 0 / 0 ; } ;
new class { static #x = #x in typeof function ( ) { } ( ) . #x ; } ;
new class { static #x = #x in ! 0 - 0 ; } ;
new class { static #x = #x in `` [ 0 . #x ] -- ; } ;
new class { static #x = #x in super [ 0 ?. #x ( ) ( ) . #x ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in await } ] ; } ;
new class { static #x = #x in `${ 0 }` [ 0 ] -- ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in 0 . x ] ; } ;
new class { static #x = #x in { } >= 0 ; } ;
new class { static #x = #x in super [ '' ?. x [ [ ] ] . #x ] ; } ;
new class { static #x = #x in { x } ?. x ; } ;
new class { static #x = #x in `${ #x in super [ 0 ] -- ** 0 }` >= 0 ; } ;
new class { static #x = #x in this < x ; } ;
new class { static #x = #x in `` . #x ( ) [ 0 ] ; } ;
new class { static #x = #x in x . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => await . #x } ] ; } ;
new class { static #x = #x in `${ x }` ; } ;
new class { static #x = #x in + class extends super . x { ; } ; } ;
new class { static #x = super . x [ 0 | 0 == #x in super . x ] ; } ;
new class { static #x = super [ #x in 0 ( 0 , ... this , ) ] ; } ;
new class { static #x = #x in 0 >> 0 . #x ; } ;
new class { static #x = #x in 0 . x ( ) ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in null . #x } & 0 , ] ; } ;
new class { static #x = 0 != #x in ( 0 ) ; } ;
new class { static #x = #x in 1n . #x `` ( ) ( ) >= 0 ; } ;
new class { static #x = #x in x [ 0 ] ; } ;
new class { static #x = #x in null ?. x ?. x ; } ;
new class { static #x = #x in new null . #x ; } ;
new class { static #x = `${ #x in 0 }` . #x ; } ;
let x ; new class { static #x = x ??= #x in new 0 ; } ;
new class { static #x = #x in super [ null ] ; } ;
new class { static #x = #x in 0 . x ; } ;
new class { static #x = #x in `${ new super [ 0 ] ( ) }` ; } ;
new class { static #x = 0 != #x in ! null . #x ; } ;
new class { static #x = #x in typeof new super . x . #x . #x ( ) ; } ;
new class { static #x = #x in [ #x in 0 . #x , , ] >= 0 ; } ;
new class { static #x = #x in [ 0 ] ; } ;
new class { static #x = #x in 0 ?. [ { x , } . #x ] . #x ; } ;
new class { static #x = #x in [ ] < 0 ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in 0 . #x ] ; } ;
new class { static #x = #x in super [ 1n ?. [ super [ 0 ] ] ] ; } ;
new class { static #x = #x in 0 ?. [ true . #x ] . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0n . x . #x ] . #x ] ; } ;
new class { static #x = #x in `` + ! 0 ; } ;
new class { static #x = super . x [ 0 | 0 == #x in [ ] instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in `${ 0 }` . x ( ) >= 0 ; } ;
new class { static #x = #x in '' % 1 ; } ;
new class { static #x = #x in - 0 - 0 ; } ;
new class { static #x = #x in 1 ** true . #x ; } ;
new class { static #x = #x in { } ; } ;
new class { static #x = 0 != #x in [ 0 . #x = new new 1n . #x , ] ; } ;
new class { static #x = #x in 0 . #x in 0 ; } ;
new class { static #x = #x in 0 ?. #x [ 0 ] . #x ; } ;
new class { static #x = #x in super . x [ 0 ] >= 0 ; } ;
new class { static #x = #x in `` . #x `` + 0 ; } ;
new class { static #x = #x in 0 + null ; } ;
new class { static #x = #x in ! typeof 0 ; } ;
new class { static #x = #x in typeof ! 0 ; } ;
new class { static #x = 0 != #x in ! typeof 0 . #x ; } ;
new class { static #x = #x in 0 - 0 . x ; } ;
new class { static #x = #x in [ ] . #x `` + 0 ; } ;
new class { static #x = #x in 0 . x . x -- ; } ;
new class { static #x = #x in `` . #x - 0 ; } ;
new class { static #x = #x in [ ] . #x `` [ 0 ] -- ; } ;
new class { static #x = 0 != #x in ! 1n . #x ; } ;
new class { static #x = 0 != #x in [ 0n . #x , ] ; } ;
new class { static #x = super [ #x in 1n * 0n ] ; } ;
new class { static #x = #x in { x , } . #x >>> 0 ; } ;
new class { static #x = #x in `${ ! 0 }` ; } ;
new class { static #x = #x in `` + 0 . x ; } ;
new class { static #x = super [ -- async function x ( ) { } ( ) [ #x in 0 >>> ! delete 0 ] ] !== 0 ; } ;
new class { static #x = #x in ~ true . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in 0 ?. ( ) . x . #x ; } ;
new class { static #x = #x in { } ( ) ; } ;
new class { static #x = #x in 0 . x ?. x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ null ] ] ] ; } ;
new class { static #x = #x in void super [ 0 . #x ( 0 , ) ] ; } ;
new class { static #x = x ^ 0 | #x in [ ] ?? 0 ; } ;
new class { static #x = #x in 0 >> true . #x ; } ;
new class { static #x = #x in 0 . #x . #x ++ ; } ;
new class { static #x = #x in new this ( ... 0 ) ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . x instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in { 0 : true } ?. [ 0 ] . #x ; } ;
new class { static #x = #x in 0 << ! 0 ; } ;
new class { static #x = #x in 0 >> super [ 0 , 0 ] [ 0 ] ; } ;
new class { static #x = super [ #x in 0 ** 0 % { [ Symbol . toPrimitive ] : x => 0 } ] ; } ;
new class { static #x = #x in typeof super . x ; } ;
new class { static #x = #x in new . target [ 0 ] [ 0 ] ; } ;
new class { static #x = super [ #x in 1n * 0 . #x ++ ] ; } ;
new class { static #x = #x in 0 [ 0 ] ; } ;
new class { static #x = #x in ~ + super . x ; } ;
new class { static #x = #x in { } ?. ( ) . #x ; } ;
new class { static #x = #x in + 0 . x . x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0n . #x ] ] ] ; } ;
new class { static #x = #x in 0 . #x . x ; } ;
new class { static #x = 0 != #x in [ `` . #x `` `` , ] ; } ;
new class { static #x = #x in super [ x ?. ( ) . #x ] ; } ;
new class { static #x = #x in 0 >>> 0n ; } ;
new class { static #x = #x in null . #x `` ; } ;
new class { static #x = #x in 0 * x . #x ; } ;
new class { static #x = #x in 0 . #x + 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : true } % ! 1 ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . x [ 0 ] [ 0 , 0 ] ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ null . #x ] ] . #x ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { } } % ! 1 ; } ;
new class { static #x = #x in delete new 0 ; } ;
new class { static #x = #x in void { } . #x ; } ;
new class { static #x = #x in [ ] < 0 in { exec : 0 } [ 0 , 0 ] . #x >= - 0 ; } ;
new class { static #x = #x in 0 - super . x ; } ;
new class { static #x = #x in 0 << { x , } . #x ; } ;
new class { static #x = #x in ~ new 0 . #x ( ) ; } ;
new class { static #x = #x in function * ( ) { } ( ) ; } ;
new class { static #x = #x in null ** ~ 0 ; } ;
new class { static #x = #x in 0 + `` ; } ;
new class { static #x = #x in ! 1 >> 0 ; } ;
new class { static #x = #x in 0 << 0 . x ; } ;
new class { static #x = #x in super [ 0 ?. x [ super . x . #x ] . #x ] ; } ;
new class { static #x = #x in 0 + { x } . #x ; } ;
new class { static #x = #x in - super . x . #x ; } ;
new class { static #x = #x in 0 + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x . x ] ; } ;
new class { static #x = #x in { } % 0 ; } ;
new class { static #x = #x in `${ 1n . #x }` ; } ;
new class { static #x = #x in 0 . #x . x ** 0 ** 0 >= 0 ; } ;
new class { static #x = #x in typeof 0 . #x ?. x ; } ;
new class { static #x = #x in 0 . #x `` + 0 ; } ;
new class { static #x = #x in - 0 [ 0 ] [ 0 ] . #x ; } ;
new class { static #x = #x in x . #x ++ ; } ;
new class { static #x = #x in super . x >>> 0 ; } ;
new class { static #x = #x in typeof [ ] . #x `` ; } ;
new class { static #x = #x in 0 ( ) . #x + 0 ; } ;
new class { static #x = #x in 0 . x . #x -- ; } ;
new class { static #x = #x in 0 >> 0n ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ 0 != 0 ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 ; } } % ! 1 ; } ;
new class { static #x = #x in ! function ( ) { } ( ) . #x / 1 >= 0 ; } ;
new class { static #x = #x in ~ 0 . #x ; } ;
new class { static #x = #x in 0n + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ `` ] ] ] ; } ;
new class { static #x = { [ #x in 0 ?? 0 ] : false } ; } ;
new class { static #x = #x in void 0 . x ; } ;
new class { static #x = #x in [ ] . #x >> 0 ; } ;
new class { static #x = #x in x >= 0 ; } ;
new class { static #x = #x in 0n >>> 1n ; } ;
new class { static #x = #x in [ super . x , ] ; } ;
new class { static #x = super [ #x in new null . #x ( ) * 0 ] ; } ;
new class { static #x = #x in 0 [ x ] ; } ;
new class { static #x = #x in 0 << null . #x . #x ; } ;
new class { static #x = #x in new super . x ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * null . #x . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = #x in class x extends 0 { } >= 0 ; } ;
new class { static #x = #x in ~ 0 / 0 * 1 ; } ;
new class { static #x = #x in `${ #x in '' . #x }` >= 0 ; } ;
new class { static #x = #x in ~ '' ; } ;
new class { static #x = #x in + class extends super [ { x } ] { ; } ; } ;
new class { static #x = #x in 0 + true . #x ; } ;
new class { static #x = #x in 0 ?. [ super . x . #x ] . #x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = new 0 . x [ 0 ] , ] ; } ;
new class { static #x = #x in async function * ( ) { } ( ) [ [ ] ] ; } ;
new class { static #x = #x in { x } . #x ++ ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in { } , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 ?. x ] ] ] ; } ;
new class { static #x = #x in delete 0 ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 ( ) } ] ; } ;
new class { static #x = #x in 0 . x << 0 ; } ;
new class { static #x = #x in `${ new 0 }` ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 > 0 ] . #x ] ; } ;
new class { static #x = #x in [ ] ?. x ?. x ; } ;
new class { static #x = #x in null . #x `` . x ; } ;
new class { static #x = #x in 0 . #x ( ) [ 0 ] ; } ;
new class { static #x = #x in function ( ) { } ( ) . x ; } ;
new class { static #x = #x in 0 - 0n ; } ;
new class { static #x = #x in new 0 >>> 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ x ] ] ; } ;
new class { static #x = new 0 [ #x in 1n . #x . #x . x ] . #x ; } ;
new class { static #x = #x in `` [ 0 ] ; } ;
new class { static #x = 0 ^ 0 | #x in 0n . x ?? 0 ; } ;
new class { static #x = #x in new x ; } ;
new class { static #x = #x in x < 0 ; } ;
new class { static #x = #x in typeof new '' . #x . #x ( ) ; } ;
new class { static #x = #x in 1 ** 0n . #x ; } ;
new class { static #x = #x in 0 ( ) ( ) ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in super . x , ] ; } ;
new class { static #x = #x in super [ '' ?. [ 0 % 0 ] . #x ] ; } ;
new class { static #x = #x in 0 . #x . #x ; } ;
new class { static #x = #x in 1n << { } ; } ;
new class { static #x = #x in 0 . #x * 0 >= 0 ; } ;
new class { static #x = #x in 0 ( ) . x ; } ;
new class { static #x = { [ #x in 0 . #x ?? 0 ] : x } ; } ;
new class { static #x = 0 != #x in [ 0 . #x = true . #x `` , ] ; } ;
new class { static #x = #x in 0 ** ! 0 ; } ;
new class { static #x = super . x [ super [ 0 , #x in 0 ?. x . #x , [ , ] ] *= 0 ] . #x ; } ;
new class { static #x = #x in null . #x . #x ++ ; } ;
new class { static #x = 0 != #x in { } ; } ;
new class { static #x = #x in 0 . x ++ ; } ;
new class { static #x = #x in 0 . #x [ 0 ] >= 0 ; } ;
new class { static #x = { [ #x in 0n . #x ?? 0 ] : x } ; } ;
new class { static #x = 0 != #x in { x } ; } ;
new class { static #x = #x in 0 + null . #x ; } ;
new class { static #x = #x in [ ] . x -- ; } ;
new class { static #x = super [ #x in true . #x `` * 1 ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in x , ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in x , ] ; } ;
new class { static #x = #x in [ function ( ) { } ( ) . #x , , ] >= 0 ; } ;
new class { static #x = super [ #x in 1n % function ( ) { } ( ) . #x ] ; } ;
new class { static #x = #x in void new super . x . #x ( ) ; } ;
new class { static #x = #x in super [ 0 ?. ( ... 0 ) . #x ] ; } ;
new class { static #x = #x in '' << 1 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in new 0 , ] ; } ;
new class { static #x = #x in 1n . #x in 0 ; } ;
new class { static #x = #x in 0 ( ) . #x -- ; } ;
new class { static #x = #x in 0 . x in 0 ; } ;
new class { static #x = #x in 0 >> true . #x . #x ; } ;
new class { static #x = #x in 0 . #x `` . x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 . #x ] ] ] ; } ;
new class { static #x = #x in '' . x ; } ;
new class { static #x = #x in ~ 1 ; } ;
new class { static #x = #x in [ ] . #x `` ( ) ( ) >= 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 . #x ||= 0 , ] ; } ;
new class { static #x = #x in + import ( 0 . x ??= 0 ) ; } ;
new class { static #x = #x in 0 >> 0 . #x . #x ; } ;
new class { static #x = #x in [ x , , ] >= 0 ; } ;
new class { static #x = #x in 1n . #x >> 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ function ( ) { } ( ) . #x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in 0 ( ) ] ] . #x ] ; } ;
new class { static #x = #x in 0 >>> function ( ) { } ( ) . #x ** 0 ; } ;
new class { static #x = #x in 0 >>> async function * ( ) { } ( ) . #x ; } ;
new class { static #x = #x in 0 >>> 0 . x ; } ;
new class { static #x = #x in 0 . #x ** ~ 0 ; } ;
new class { static #x = #x in x `` [ 0 ] -- ; } ;
new class { static #x = #x in true . #x . #x -- ; } ;
new class { static #x = #x in void super [ 0 ( ) ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => [ ] } ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ [ 0 ] [ 0 ] ] ] ] ; } ;
new class { static #x = #x in super [ super . x ] ; } ;
new class { static #x = #x in super [ '' ?. [ super [ 0 [ 0 ] ] ] ] ; } ;
new class { static #x = #x in ~ 0 . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in 0 * super . x ; } ;
new class { static #x = #x in [ ] < 0 in 0 [ #x in 0 , 0 ] . #x >= - 0 ; } ;
new class { static #x = #x in 0 % 0 . #x . x ; } ;
new class { static #x = 0 >= super [ 0 ^ 0 === #x in { x } ] ; } ;
new class { static #x = #x in 1 ** 0 . x ; } ;
new class { static #x = #x in 0 [ true ] ; } ;
new class { static #x = super [ #x in 0 ( ) ] ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : x => 0 } ; } ;
new class { static #x = #x in 0 << [ ] . #x ; } ;
new class { static #x = #x in + class extends super [ { } ] { ; } ; } ;
new class { static #x = #x in super [ 0 ?. [ new super [ 0 ] ] . #x ] ; } ;
new class { static #x = #x in 0 - 0 . #x ; } ;
new class { static #x = #x in super [ 0 < 0 ] ; } ;
new class { static #x = #x in `` [ 0 % 0 ] -- ; } ;
new class { static #x = #x in void 0 . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in super . x . x ] . #x ] ; } ;
new class { static #x = #x in 0 ?. #x ( ) . #x ; } ;
new class { static #x = #x in 0 . #x [ 0 ] -- ; } ;
new class { static #x = #x in 0 ?. ( ) ( ) . #x ; } ;
new class { static #x = #x in + function ( ) { } ( ) . #x ; } ;
new class { static #x = #x in 0 ?. #x . #x . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in x ] ] . #x ] ; } ;
new class { static #x = #x in 0 . #x >>> 0 ; } ;
new class { static #x = #x in 0 . x . x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ { } . #x `` ] ] ; } ;
new class { static #x = #x in 0 . #x . #x -- ; } ;
new class { static #x = #x in 0 . #x ( ) ( ) >= 0 ; } ;
new class { static #x = #x in 0 / 0 / 0 ; } ;
new class { static #x = #x in new . target ; } ;
new class { static #x = #x in 0 + 0 [ 0 ] . #x ; } ;
new class { static #x = #x in { } - 0 ; } ;
new class { static #x = 0 != #x in [ 0 & #x in super . x , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ new 0 ] . #x ] ; } ;
new class { static #x = #x in 0 ?. [ 0 . x ] . #x ; } ;
new class { static #x = #x in 0 + new 0 . #x ; } ;
new class { static #x = #x in new 0 ( ) ; } ;
new class { static #x = #x in ! x ; } ;
new class { static #x = #x in typeof 1n . #x . #x ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : 0 } >> super . x ] . #x . #x ; } ;
new class { static #x = #x in class x { } ; } ;
let x ; new class { static #x = x ??= #x in 0 . x ; } ;
new class { static #x = #x in - new 0 . #x ; } ;
new class { static #x = #x in ! 0 ; } ;
new class { static #x = 0 != #x in [ { } . #x `` , ] ; } ;
new class { static #x = { [ #x in super . x ?? 0 ] : false } ; } ;
new class { static #x = #x in + [ ] ; } ;
new class { static #x = #x in super [ 0 ?. [ new '' . #x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in 0 . #x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ '' . #x ] ] ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >>> new . target >>> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in typeof true . #x `` ; } ;
new class { static #x = #x in super [ 0 ?. x [ '' . #x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ] % [ ] ; } ;
new class { static #x = #x in new 0 . #x ** ~ + 0 ; } ;
new class { static #x = #x in '' . #x `` ** ~ + 0 ; } ;
new class { static #x = #x in typeof null . x ; } ;
new class { static #x = #x in [ #x in x , , ] >= 0 ; } ;
new class { static #x = #x in 0 . x . #x >>> 0 ; } ;
new class { static #x = #x in { [ #x in { x , } ] : ( ) => { throw 0 ; } } % ! 1 ; } ;
new class { static #x = #x in - 0 . #x ; } ;
new class { static #x = #x in super [ 0 ?. x . x . #x [ 0 ] . #x ] ; } ;
new class { static #x = super . x [ super [ 0 , #x in null . #x , [ , ] ] *= 0 ] . #x ; } ;
new class { static #x = #x in void super . x ; } ;
new class { static #x = #x in `${ #x in 0 . x }` >= 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in 0n . #x } & 0 , ] ; } ;
new class { static #x = #x in null . #x >> 0 ; } ;
new class { static #x = #x in void 0 [ 0 ] . #x . #x ; } ;
new class { static #x = #x in new 0 in 0 ; } ;
new class { static #x = { [ #x in x . #x ?? 0 ] : x } ; } ;
new class { static #x = #x in super [ 0 ?. [ x `` ] ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = super . x , ] ; } ;
new class { static #x = #x in true . #x `` ** ~ + 0 ; } ;
new class { static #x = #x in new true . #x ; } ;
new class { static #x = #x in ~ 0 / 0 . #x / 1 >= 0 ; } ;
new class { static #x = #x in 0n [ 0 ] ?. x >= 0 ; } ;
new class { static #x = #x in void super [ { } ] ; } ;
new class { static #x = #x in 1 ** 0 . x . #x ; } ;
new class { static #x = #x in typeof x . #x . #x ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : function * await ( x , ) { if ( 0 ) ; else try { } finally { } ; } } }` >= 0 ; } ;
new class { static #x = #x in `${ 0n . #x `` }` ; } ;
new class { static #x = #x in 1 << { } ; } ;
new class { static #x = #x in `${ 0 . x }` ; } ;
new class { static #x = #x in `${ #x in 0 . x . #x }` >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. #x . #x . x . #x ] ; } ;
new class { static #x = #x in 0 ( ) . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ true . #x ] . #x ] ; } ;
new class { static #x = #x in '' . #x ** ~ 0 ; } ;
new class { static #x = #x in 0 >>> 0 ( ) . #x ; } ;
new class { static #x = #x in 0 >> { } ; } ;
new class { static #x = #x in `${ 0 . #x }` ; } ;
new class { static #x = #x in super . x ( ) ; } ;
new class { static #x = #x in + new 0 . #x ; } ;
new class { static #x = #x in `${ #x in x }` >= 0 ; } ;
new class { static #x = #x in `` . #x `` ( ) ( ) >= 0 ; } ;
new class { static #x = #x in null >>> 0 ; } ;
new class { static #x = #x in 0 / 0 ; } ;
new class { static #x = 0 != #x in [ #x in 0 . #x <= 0 , ] ; } ;
new class { static #x = #x in void super [ super . x ] ; } ;
new class { static #x = #x in 0n + 1n ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in { } . x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . #x . #x ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0n . #x `` , ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => this . #x } ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ `` . x . #x , ] ; } ;
new class { static #x = #x in 0 % 0 ; } ;
new class { static #x = #x in true ?. x ( ) . #x ; } ;
let x ; new class { static #x = #x in typeof x . #x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in new 0 , ] ; } ;
new class { static #x = #x in 0 ?. [ 0 ] . #x ; } ;
new class { static #x = #x in { } + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . x ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ null [ 0 ] ] ] ] ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 ( ) ; } } % ! 1 ; } ;
new class { static #x = #x in + class extends super [ { [ super [ 0 ] . toPrimitive ] : function * ( x ) { } } ] { ; } ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in new 0 , ] ; } ;
new class { static #x = #x in null . #x `` [ 0 ] -- ; } ;
new class { static #x = #x in `` [ 0 ] -- ; } ;
new class { static #x = { [ #x in 0 . x ?? 0 ] : `` } ; } ;
new class { static #x = #x in ~ { } ; } ;
new class { static #x = #x in null . #x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in + class extends super [ { [ Symbol . toPrimitive ] : function * ( ) { } } ] { ; } ; } ;
new class { static #x = #x in super [ function ( ) { } ?. ( ) ( ) . #x ] ; } ;
new class { static #x = #x in null . #x . #x -- ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => 0 . x . #x } ] ; } ;
new class { static #x = #x in true . x ( ) >= 0 ; } ;
new class { static #x = #x in `${ '' . #x }` ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in 0 . #x ] ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . #x . x ] . #x ] ; } ;
new class { static #x = #x in 0n ?. x . #x . #x ; } ;
new class { static #x = #x in [ #x in 0 , ] ; } ;
new class { static #x = #x in super [ 0 ?. [ '' . x ] . #x ] ; } ;
new class { static #x = #x in true . #x * 0 >= 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in true . x , ] ; } ;
new class { static #x = #x in `${ { [ '' . #x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in + class extends super [ { [ Symbol . toPrimitive ] : ! 0 } ] { ; } ; } ;
new class { static #x = #x in 0 in 0 ; } ;
new class { static #x = #x in 0n ?. [ { } ] . #x ; } ;
new class { static #x = #x in 0 >> 0 . x . #x ; } ;
new class { static #x = #x in true ?. x . #x ; } ;
new class { static #x = #x in 0 % 0 ** ~ 0 < 0 in 0 >= - 0 ; } ;
new class { static #x = super [ #x in 0 . #x ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ! new 0 ( ) . #x / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ [ ] . x . #x ] . #x ] ; } ;
new class { static #x = #x in 0 ( ) ; } ;
new class { static #x = #x in 0n . x ( ) >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ 1n . x ] . #x ] ; } ;
new class { static #x = #x in true . #x `` . x ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : this } }` >= 0 ; } ;
new class { static #x = #x in typeof 0 . #x . x ; } ;
new class { static #x = #x in 0 * 0 . x . #x ; } ;
new class { static #x = #x in - 1n ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in 0 ?. x [ 0 ] ] ] !== 0 ; } ;
new class { static #x = #x in [ ] . #x `` ; } ;
new class { static #x = #x in ! 0 . #x / 1 >= 0 ; } ;
new class { static #x = #x in 0 . x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in new 0 . #x ( ) ?. x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in ! typeof null . #x ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in true ?. x , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 0 ] ??= 0 ] . #x ] ; } ;
new class { static #x = 0 != #x in [ null . #x `` `` , ] ; } ;
new class { static #x = #x in true . x ++ ; } ;
new class { static #x = #x in `${ #x in null . #x }` >= 0 ; } ;
new class { static #x = { [ #x in 0 ?. x [ 0 ] ?? 0 ] : 0 } ; } ;
new class { static #x = #x in function ( ) { } ( ) . #x -- ; } ;
new class { static #x = #x in super [ 0 . x ] ; } ;
new class { static #x = #x in 0 << true . #x . #x ; } ;
new class { static #x = #x in typeof 0 . #x . #x ; } ;
new class { static #x = #x in 0 . x . #x >= 0 ; } ;
new class { static #x = #x in [ ] in 0 ; } ;
new class { static #x = #x in 0 . #x ; } ;
new class { static #x = #x in super [ 0 ] ; } ;
new class { static #x = #x in 0 . #x -- ; } ;
new class { static #x = super . x [ super [ 0 , #x in super . x , `` ] *= 0 ] . #x ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : { } } }` >= 0 ; } ;
new class { static #x = #x in 0 ( ) . #x << 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . x . #x ] . #x ] ; } ;
new class { static #x = new 0 [ #x in true . #x . x ] . #x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 . #x ( ) ** 0 , ] ; } ;
new class { static #x = #x in `` [ null . #x ] -- ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 ?. ( ) } ] ; } ;
new class { static #x = #x in ~ 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ true . #x ] ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ 1n . #x `` ] ] ; } ;
new class { static #x = new 0 [ #x in 0 . x . x ] . #x ; } ;
new class { static #x = #x in ~ 0 / 0 / - 0 >= 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ null . x . #x , ] ; } ;
new class { static #x = #x in 0 ** ~ 0 . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ new true . #x ] . #x ] ; } ;
new class { static #x = #x in [ ] < 0 in 0 . x [ 0 , 0 ] . #x >= - 0 ; } ;
new class { static #x = #x in `${ [ ] }` ; } ;
new class { static #x = 0 ^ 0 | #x in [ ] . x ?? 0 ; } ;
new class { static #x = #x in 0 << 0n . #x . #x ; } ;
new class { static #x = #x in 0 ?. x . #x [ 0 ] . #x ; } ;
new class { static #x = #x in 0 ?. [ { } ] . #x ; } ;
new class { static #x = #x in '' . #x >> 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in 0 . x } & 0 , ] ; } ;
new class { static #x = super [ #x in [ ] ] ; } ;
new class { static #x = #x in `` >> 0 ; } ;
new class { static #x = #x in 1n ** ~ 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in this ; } } % ! 1 ; } ;
new class { static #x = #x in [ , ] ; } ;
new class { static #x = #x in [ #x in 0 instanceof 0 , , ] >= 0 ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in 0 . #x ] ] !== 0 ; } ;
new class { static #x = #x in 0 . x ** ~ 0 ; } ;
new class { static #x = #x in { x } . x ; } ;
new class { static #x = #x in 0 << null ; } ;
new class { static #x = #x in 0 ?. x . x ?. x ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ super . x ] ] ] ; } ;
new class { static #x = 0 [ #x in { } ] ; } ;
new class { static #x = #x in '' . #x `` [ 0 ] -- ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : async function ( x ) { } } + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ super . x ( 0 , ) ] . #x ] ; } ;
new class { static #x = #x in 1 >> 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in 1n . x , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in super . x & 0 , ] ; } ;
new class { static #x = #x in super [ x ] ; } ;
new class { static #x = #x in [ #x in 0 <= 0 , ] ; } ;
new class { static #x = #x in + ! 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ true . x ] ] . #x ] ; } ;
new class { static #x = #x in 0 ?. [ #x in 0 ] . #x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : async x => 0 } % ! 1 ; } ;
new class { static #x = #x in super [ 0 ?. x ( 0 , super [ 0 , 0 ] ??= 0 ) . #x ] ; } ;
new class { static #x = #x in x >> 0 ; } ;
new class { static #x = #x in 0 ( ) `` ; } ;
new class { static #x = #x in typeof new 0 . #x . #x ( ) ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in 0 ?. x ] ] !== 0 ; } ;
new class { static #x = #x in 0 ?. [ null ] . #x ; } ;
new class { static #x = #x in 0 % 0 ( ) . #x ; } ;
new class { static #x = #x in [ 0 ] [ 0 ] -- ; } ;
new class { static #x = #x in delete '' . x ; } ;
new class { static #x = #x in class extends 0 { } >= 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super [ 0 ] ; } } % ! 1 ; } ;
new class { static #x = #x in '' . x ++ ; } ;
new class { static #x = #x in 0 + { } . #x ; } ;
new class { static #x = #x in 0 ?. x . #x . #x . #x ; } ;
new class { static #x = #x in function * ( ) { } ?. ( ) . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ '' [ `` ] ] ] ] ; } ;
new class { static #x = 0 . #x = 0 & #x in 0 ; } ;
new class { static #x = #x in [ ] < 0 in 0 [ 0 , 0 ] . #x >= - 0 ; } ;
new class { static #x = #x in true ** ~ 0 ; } ;
new class { static #x = #x in ~ ! 0 ; } ;
new class { static #x = #x in { } . x ++ ; } ;
new class { static #x = #x in ~ 0 << 0 ; } ;
new class { static #x = #x in '' . #x in 0 ; } ;
new class { static #x = #x in [ ] ?. x . x . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : { } } ] ; } ;
new class { static #x = #x in super [ 0 ] . #x + 0 ; } ;
new class { static #x = #x in 0 << super [ 1n ] ; } ;
new class { static #x = #x in x -- ; } ;
new class { static #x = #x in typeof x . #x ; } ; var x ;
new class { static #x = #x in `${ { [ super . x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in 0 ?. #x [ 0 ( ) . x ||= 0 ] . x . #x ; } ;
new class { static #x = { [ #x in { } . #x ?? 0 ] : x } ; } ;
new class { static #x = #x in ! 0 >>> 0 ; } ;
new class { static #x = #x in typeof null . #x `` ; } ;
new class { static #x = 0 . #x = #x in 0 ; } ;
new class { static #x = #x in 0 ?. x . #x ( ) . #x ; } ;
new class { static #x = #x in 1 ** ~ x ; } ;
new class { static #x = #x in ~ 0 / 0 * ~ 0 >= 0 ; } ;
new class { static #x = #x in '' >>> 0 ; } ;
new class { static #x = #x in void super [ ! ~ 0 ] ; } ;
new class { static #x = #x in typeof '' ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ~ ! 0 / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = #x in 0n . #x [ 0 ] >= 0 ; } ;
new class { static #x = #x in { [ #x in 0 ] : 0 ? 0 : 0 } % ! 1 ; } ;
new class { static #x = super . x [ 0 | 0 == #x in super [ 0 ] . x instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in ! [ ] / 1 >= 0 ; } ;
new class { static #x = #x in 0 . #x ++ ; } ;
new class { static #x = #x in `` . #x . #x ++ ; } ;
new class { static #x = #x in [ ... 0 , ] ; } ;
new class { static #x = #x in 0 . #x `` ( ) ( ) >= 0 ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * true . #x . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ;
new class { static #x = #x in x in 0 ; } ;
new class { static #x = #x in 0 >> super . x ; } ;
new class { static #x = 0 ^ 0 | #x in super . x ?? 0 ; } ;
new class { static #x = #x in - 0n ; } ;
new class { static #x = #x in super [ 0 ?. x [ ! 0 ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = null . #x `` , ] ; } ;
new class { static #x = #x in ~ 0 / 0 * 0 ; } ;
new class { static #x = #x in super [ 0 ?. ( ) . #x [ 0 ] . #x ] ; } ;
new class { static #x = #x in null . x . #x ; } ;
new class { static #x = #x in this >>> true ; } ;
new class { static #x = #x in + `` ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : `` } }` >= 0 ; } ;
new class { static #x = #x in [ ] < 0 in null [ 0 , 0 ] . #x >= - 0 ; } ;
new class { static #x = #x in 0 - null ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : function x ( ) { } } ** 0 ** 0 >= 0 ; } ;
new class { static #x = 0 != #x in ! super . x ; } ;
new class { static #x = #x in new { x } ( ) ; } ;
new class { static #x = #x in 1n . #x - 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ null . #x `` ] ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 [ 0 ] . x . #x ||= 0 , ] ; } ;
new class { static #x = #x in - 0 [ 0 ] [ x ] . #x ; } ;
new class { static #x = super [ #x in `` . #x `` ?. x ] ; } ;
new class { static #x = #x in '' . #x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in this ?. x . #x [ 0 ] . #x ; } ;
new class { static #x = #x in null . #x - 0 ; } ;
new class { static #x = #x in function * ( ) { } ( ) ( ) >= 0 ; } ;
new class { static #x = #x in typeof 0 ( ) . #x ; } ;
new class { static #x = #x in ~ super . x ; } ;
new class { static #x = #x in [ 0 . #x ] ; } ;
new class { static #x = #x in 0 . x . #x % [ ] ; } ;
new class { static #x = #x in null . x ( ) >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ new super [ 0 ] ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in 0 ?. #x , ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x `` , ] ; } ;
new class { static #x = #x in super [ function * ( ) { } ?. ( ) [ { [ Symbol . toPrimitive ] : false } ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ '' [ 0 ] ] ] ] ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : function ( ) { } } ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in { } ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ null . #x ] . #x ] ; } ;
new class { static #x = #x in 1 ** null . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ x ] ] ] ; } ;
new class { static #x = #x in ~ { x , } . #x ; } ;
new class { static #x = #x in true . #x >>> 0 ; } ;
new class { static #x = #x in typeof `` . #x ?. x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = 0 != #x in 0 . x . #x ; } ;
new class { static #x = #x in `${ null }` ; } ;
new class { static #x = #x in x % 0 ; } ;
new class { static #x = #x in 0 . #x . x -- ; } ;
new class { static #x = #x in function ( ) { } ( ) ; } ;
new class { static #x = #x in null << 0 ; } ;
new class { static #x = #x in new function ( ) { } ( ) ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in 0 . x . #x & 0 , ] ; } ;
new class { static #x = #x in 0 ?. x . #x in 0 < 0 in 0 >= - 0 ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in super . x ] ; } ;
new class { static #x = #x in `${ { [ x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in null < 0 ; } ;
new class { static #x = #x in new { } ; } ;
new class { static #x = #x in 0 . #x < 0 in 0 >= - 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ `` . #x `` ] ] ; } ;
new class { static #x = #x in ~ 1n ; } ;
new class { static #x = #x in typeof 0 . #x `` ; } ;
new class { static #x = #x in [ 0 , ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ { x , } . #x ] . #x ] ; } ;
let x ; new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ;
new class { static #x = #x in `` ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ { [ Symbol . toPrimitive ] : null } ^ #x in { } ] ] . #x ] ; } ;
new class { static #x = super [ #x in 0 ] ; } ;
new class { static #x = #x in + class extends super [ 0 > 0 ] { ; } ; } ;
new class { static #x = #x in 1 >>> 0 ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ~ - 0 * 0 ** ~ 0 , ] ; } ;
new class { static #x = super . x [ 0 | 0 == #x in [ ] ] ; } ;
new class { static #x = #x in 0 - true ; } ;
new class { static #x = x ??= 0 ; } ; let x ;
new class { static #x = #x in this . x . #x - 0 ; } ;
new class { static #x = #x in { } . #x ** ~ 0 ; } ;
new class { static #x = 0 == #x in 0 != 0 ; } ;
new class { static #x = #x in 0 ?. [ new 0 ] . #x ; } ;
new class { static #x = #x in ~ 0 >>> 0 ; } ;
new class { static #x = #x in + super [ x ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in [ ] , ] ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : async x => { } } ; } ;
new class { static #x = #x in 0n ?. x . #x [ 0 ] . #x ; } ;
new class { static #x = #x in 0 << new super . x ; } ;
new class { static #x = #x in 1n >> 0 ; } ;
new class { static #x = #x in 0 . x . #x >> 0 ; } ;
new class { static #x = #x in + class extends super [ `` ] { ; } ; } ;
new class { static #x = #x in '' ?. x ( ) . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in super . x } ] ; } ;
new class { static #x = #x in - 0 / 1 >= 0 ; } ;
new class { static #x = #x in + '' . #x . #x ; } ;
new class { static #x = #x in 0 ?. x . x . x . #x ; } ;
new class { static #x = #x in 0 ?. [ async function * ( ) { } ( ) . #x ] . #x ; } ;
new class { static #x = #x in true . #x >= 0 ; } ;
new class { static #x = #x in 0 * [ ] . #x ; } ;
new class { static #x = #x in '' + 1n ; } ;
new class { static #x = #x in typeof new 0 . #x ( ) ; } ;
new class { static #x = 0 != #x in [ #x in super . x . x <= 0 , ] ; } ;
new class { static #x = #x in typeof [ ] ; } ;
new class { static #x = #x in 0 ?. [ 0 ( ) . #x ] . #x ; } ;
new class { static #x = super [ #x in x ] ; } ;
new class { static #x = #x in 0 + 0n . #x ; } ;
new class { static #x = #x in true . x ; } ;
new class { static #x = #x in '' % 0 ; } ;
new class { static #x = 0 != #x in [ 0 & #x in 0 . #x , ] ; } ;
new class { static #x = #x in `${ 0 , super . x %= 0 }` ; } ;
new class { static #x = #x in null . #x >>> 0 ; } ;
new class { static #x = #x in x >>> 0 ; } ;
new class { static #x = #x in 0 * true . #x ; } ;
new class { static #x = #x in ! ~ 0 >>> 0 ; } ;
new class { static #x = #x in '' ** ~ 0 ; } ;
new class { static #x = 0 != #x in [ x . #x , ] ; } ;
new class { static #x = new 0 [ #x in 0 . x ] . #x ; } ;
new class { static #x = #x in ~ ~ 0 ; } ;
new class { static #x = 0 != #x in [ #x in 0n . x <= 0 , ] ; } ;
new class { static #x = #x in 0 >> x ; } ;
new class { static #x = #x in 0 / 0 * 0 ; } ;
new class { static #x = #x in ~ 0 / null . #x / 1 >= 0 ; } ;
new class { static #x = #x in 0 . #x [ 0 ] << 0 ; } ;
new class { static #x = #x in + { } . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ 1n . x ] ] . #x ] ; } ;
new class { static #x = #x in '' ?. x ?. x ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in 0 [ 0 ] . x , ] ; } ;
new class { static #x = #x in 0 . x . #x `` ; } ;
new class { static #x = super . x [ 0 | 0 == #x in new 0 ] ; } ;
new class { static #x = #x in 0 [ 0 ] . #x << 0 ; } ;
new class { static #x = #x in 0 ?. x ( ... 0 ) . #x ; } ;
new class { static #x = #x in + '' . #x ; } ;
new class { static #x = 0 . #x = #x in { index : async * function ( x ) { } } && 0 ; } ;
new class { static #x = #x in 0 << super . x ; } ;
new class { static #x = #x in '' . #x `` . x ; } ;
new class { static #x = #x in 1n - 0 ; } ;
new class { static #x = #x in 0 >> ! ~ 0 ; } ;
new class { static #x = #x in 0 + new 0 ; } ;
new class { static #x = #x in { next : true } >= { [ Symbol . toPrimitive ] : async x => 0 } ; } ;
new class { static #x = #x in `${ null . #x }` ; } ;
new class { static #x = #x in x . #x ** ~ 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in `` . x ] ] . #x ] ; } ;
new class { static #x = #x in - { } ; } ;
new class { static #x = #x in [ #x in [ ] . #x , , ] >= 0 ; } ;
new class { static #x = #x in + null ; } ;
new class { static #x = #x in 0 << { } . #x . #x ; } ;
new class { static #x = #x in '' - 0 ; } ;
new class { static #x = #x in super . x in 0 ; } ;
new class { static #x = #x in 0 ( 0 , ... 0 , ) >= 0 ; } ;
new class { static #x = #x in [ ] . x . #x ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in 0n ?. x , ] ; } ;
new class { static #x = #x in + class x extends 0 { } . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 . x } ] ; } ;
new class { static #x = 0 != #x in [ null . #x `` , ] ; } ;
new class { static #x = #x in ~ 0n . x . #x / 0 * 1 >= 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = super . x ||= 0 , ] ; } ;
new class { static #x = #x in + class extends super [ { [ 0 . #x . toPrimitive ] : function * ( x ) { } } ] { ; } ; } ;
new class { static #x = #x in super [ this ?. x [ 0 ] . #x ] ; } ;
new class { static #x = #x in null % 0 ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . #x > 0 instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = super [ #x in 0 . x . x . #x ?. x ] ; } ;
new class { static #x = #x in 0 >> [ ] . x ; } ;
new class { static #x = 0 != #x in 0 . #x ; } ;
new class { static #x = #x in super . x . #x ; } ;
new class { static #x = #x in `${ #x in [ ] . #x }` >= 0 ; } ;
new class { static #x = #x in 0 << x . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 . #x } ] ; } ;
new class { static #x = #x in 0 ?. x ; } ;
new class { static #x = new 0 [ #x in `` . x ] . #x ; } ;
new class { static #x = #x in new 0 << 0 ; } ;
new class { static #x = super [ #x in new 0 . #x ( ) * 0 ] ; } ;
new class { static #x = #x in new super . x ( ) >>> 0 ; } ;
new class { static #x = #x in 0 % ! 1 ; } ;
new class { static #x = 0 != #x in 0 . x ; } ;
new class { static #x = #x in super [ 0 ?. x [ `` . #x . x ] . #x ] ; } ;
new class { static #x = #x in '' % x ; } ;
new class { static #x = #x in `${ 0 }` ?. x . #x [ 0 ] . #x ; } ;
new class { static #x = #x in delete { } . x ; } ;
new class { static #x = #x in function x ( ) { } ; } ;
new class { static #x = #x in 0 . #x >= 0 ; } ;
new class { static #x = #x in 0 >> 0 . #x . x ; } ;
new class { static #x = #x in `` ?. x . #x ( ) . #x ; } ;
new class { static #x = #x in 0 . x - 0 ; } ;
new class { static #x = #x in + 1n . #x . #x ; } ;
new class { static #x = #x in 0 ?. x . #x . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in super . x ] ] . #x ] ; } ;
new class { static #x = #x in - true . #x ; } ;
new class { static #x = super [ #x in 1n / 1n ] ; } ;
new class { static #x = #x in 0 ?. x [ 0 ] . #x ; } ;
new class { static #x = 0 != #x in [ 0 & #x in null . #x , ] ; } ;
new class { static #x = #x in 0 ?. [ 0 . #x -- ] . #x ; } ;
new class { static #x = #x in delete super . x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw new super . x ; } } % ! 1 ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => { } } ] ; } ;
new class { static #x = #x in 0 - '' ; } ;
new class { static #x = 0 != #x in [ 0 & #x in 0 . x . #x , ] ; } ;
new class { static #x = #x in true . #x `` + 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in super . x ] . #x ] ; } ;
new class { static #x = #x in x ; } ; function x ( ) { }
new class { static #x = #x in void super [ 0 . x ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in true . #x , ] ; } ;
new class { static #x = #x in 0 + 0 . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in this . x ] ] . #x ] ; } ;
new class { static #x = #x in new x ( ) ; } ;
new class { static #x = #x in ~ '' . x . #x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in '' . #x >= 0 ; } ;
new class { static #x = #x in new 0 ; } ;
new class { static #x = #x in [ ] < 0 in new 0 ( ) . #x >= - 0 ; } ;
new class { static #x = #x in [ #x in 0 * 0 ** ~ void 0 , , ] >= 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in [ ] . x , ] ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * null . #x ?. x ** ~ 0 , ] ; } ;
new class { static #x = #x in { } >>> 1 ; } ;
new class { static #x = #x in `${ 0 }` ?. x . x . #x ; } ;
new class { static #x = #x in + ! ~ ~ ! 0 ; } ;
new class { static #x = #x in x ?. x ?. x ; } ;
new class { static #x = #x in 0 ?. ( ) . #x ( ) . #x ; } ;
new class { static #x = 0 != #x in ! 0 . #x ; } ;
new class { static #x = #x in 0 . #x `` [ 0 ] -- ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in 0 ] ] !== 0 ; } ;
new class { static #x = 0 != #x in [ 0 . #x = '' . #x `` , ] ; } ;
new class { static #x = 0 | #x in 0 ?? 0 ; } ;
new class { static #x = #x in [ ] . #x >= 0 ; } ;
new class { static #x = #x in void new 0 . #x ( ) ; } ;
new class { static #x = #x in null . #x `${ 0 }` + 0 ; } ;
new class { static #x = #x in 0 ?. ( ) ; } ;
new class { static #x = #x in 1n . x -- ; } ;
new class { static #x = #x in typeof x . #x ?. x ; } ;
new class { static #x = 0 != #x in [ 0 . #x `` `` , ] ; } ;
new class { static #x = #x in x . x ++ ; } ;
new class { static #x = #x in new this ( ) ; } ;
new class { static #x = #x in `${ { [ 0 . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in 0 . #x [ 0 ] [ 0 ] -- ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : super [ 0 ] ?. x } ** 0 ** 0 >= 0 ; } ;
new class { static #x = new 0 [ #x in '' . #x . x ] . #x ; } ;
new class { static #x = #x in 0 >> x . #x ; } ;
new class { static #x = #x in - [ ] ; } ;
new class { static #x = #x in false ; } ;
new class { static #x = #x in super [ 0 ] . #x [ 0 ] . #x `` . #x ++ ; } ;
new class { static #x = #x in 0 >> function ( ) { } ( ) . #x ; } ;
new class { static #x = super [ #x in 1n % 1n ] ; } ;
new class { static #x = #x in 0 % new 0 ; } ;
new class { static #x = #x in { } ** ~ 0 ; } ;
new class { static #x = #x in + 0 . #x . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : function * ( ) { } } ] ; } ;
new class { static #x = #x in 0n . x . #x - 0 ; } ;
new class { static #x = 0 . #x ?. x != #x in { } ; } ;
new class { static #x = #x in typeof null ; } ;
new class { static #x = #x in 0 * 0 ; } ;
new class { static #x = #x in super [ 0 . #x &&= 0 ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ true . x . #x , ] ; } ;
new class { static #x = #x in new 0 % 0 ; } ;
new class { static #x = #x in 1 ** ~ + 0 . #x ; } ;
new class { static #x = #x in ~ super . x . x ; } ;
new class { static #x = #x in super [ ! 0 ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ { } . #x ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in 0 . x , ] ; } ;
new class { static #x = new super [ #x in { [ Symbol . toPrimitive ] : this } >> super . x ] . #x . #x ; } ;
new class { static #x = super [ #x in 0 >> 0 + 0 . #x ( 0 ) ] ; } ;
new class { static #x = #x in `${ { [ 0 . #x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in x . x -- ; } ;
new class { static #x = #x in null >> 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ x ] . #x ] ; } ;
new class { static #x = super . x [ super [ 0 , #x in 0 . x , `` ] *= 0 ] . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in { } } ] ; } ;
new class { static #x = 0 ^ 0 | #x in `` . #x ?? 0 ; } ;
new class { static #x = #x in 1n . #x `` ; } ;
new class { static #x = #x in + class extends super [ 0 . #x ] { ; } ; } ;
new class { static #x = #x in `${ super . x }` ; } ;
new class { static #x = #x in ~ new 0 ; } ;
new class { static #x = #x in ~ ! ! 0 ; } ;
new class { static #x = #x in { } - x ; } ;
new class { static #x = #x in this ( ) ; } ;
new class { static #x = #x in super [ 0 ?. x [ [ ] ] . #x ] ; } ;
new class { static #x = #x in super [ 0n ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => super [ 0 ?? 0 ] [ 0 ] } ] ; } ;
new class { static #x = #x in void 0 ; } ;
new class { static #x = 0 != #x in null . #x ; } ;
new class { static #x = #x in `${ '' }` ; } ;
new class { static #x = #x in 0 . x . #x ++ ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 ( ) . #x ] . #x ] ; } ;
new class { static #x = #x in 0 >> ~ x ; } ;
new class { static #x = #x in super [ 0 ?. #x [ 0 , 0 ] ( ) . #x ] ; } ;
new class { static #x = super . x [ super [ 0 , #x in new 0 , `` ] *= 0 ] . #x ; } ;
new class { static #x = #x in super [ `` ?. #x [ 0 ] . #x ] ; } ;
new class { static #x = super [ #x in 1n / 0 . #x ( ) ] ; } ;
new class { static #x = new 0 [ #x in super . x ] . #x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 . x ; } } % ! 1 ; } ;
new class { static #x = true . #x ?. x != #x in { } ; } ;
new class { static #x = #x in `${ { [ 0 . x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in 0 ** typeof 0 . #x % 0 ** 0 % 0 + 0 ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => super [ 0 ] . #x } ] ; } ;
new class { static #x = #x in super . x . #x ++ ; } ;
new class { static #x = #x in [ ] >> 0 ; } ;
new class { static #x = #x in 0 [ null ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ x ] ] ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in [ ] , ] ; } ;
new class { static #x = #x in 0 % void x ; } ;
new class { static #x = #x in 0 ?. [ 0 < 0 ] . #x ; } ;
new class { static #x = #x in + 0 . x . #x ; } ;
new class { static #x = #x in delete null . x ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . x . x . x ] . #x ] ; } ;
new class { static #x = #x in true . #x in 0 ; } ;
new class { static #x = #x in 0 * 1n . #x ; } ;
new class { static #x = #x in function * ( ) { } ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in null . #x & 0 , ] ; } ;
new class { static #x = #x in 1 ** ~ 1n ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ ! 0 ] ] ] ; } ;
new class { static #x = #x in ~ super . x . #x ; } ;
new class { static #x = #x in ~ 0 . x ; } ;
new class { static #x = 0 != #x in [ #x in x <= 0 , ] ; } ;
new class { static #x = #x in 0 * 0 . #x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 . #x ; } } % ! 1 ; } ;
new class { static #x = #x in `${ #x in true . #x }` >= 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ null ] . #x ] ; } ;
new class { static #x = #x in 0 >= 0 ; } ;
new class { static #x = #x in 1n . x ++ ; } ;
new class { static #x = #x in typeof { x , } . #x ?. x ; } ;
new class { static #x = #x in [ #x in super . x , , ] >= 0 ; } ;
new class { static #x = #x in typeof '' . #x . #x ; } ;
new class { static #x = super [ #x in 1n % 0n ] ; } ;
new class { static #x = #x in 1 >> `` ; } ;
new class { static #x = super [ #x in 0 . #x `` ?. x ] ; } ;
new class { static #x = #x in '' ; } ;
new class { static #x = #x in x ; } ; let x ;
new class { static #x = #x in delete 0n . x ; } ;
new class { static #x = #x in 0 . #x . x ++ ; } ;
new class { static #x = #x in [ ] . #x >>> 0 ; } ;
new class { static #x = #x in 0 . #x . #x >>> 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 . x [ 0 ] ] ] ] ; } ;
new class { static #x = #x in new new 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ true . #x `` ] ] ; } ;
new class { static #x = #x in 0 >> 1 ; } ;
new class { static #x = #x in new new 0 . #x . x ; } ;
new class { static #x = #x in 0 . x . x ; } ;
new class { static #x = #x in x . #x >>> 0 ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ! x . #x / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = #x in typeof [ ] . x ; } ;
new class { static #x = #x in [ ] . #x . #x -- ; } ;
new class { static #x = #x in 0 ?. x ( ) . #x ; } ;
new class { static #x = #x in super [ 0 ?. x [ 0 . #x ] . #x ] ; } ;
new class { static #x = #x in new 0 . #x ( ) ; } ;
new class { static #x = #x in 0 - { } ; } ;
new class { static #x = #x in typeof true . #x . #x ; } ;
new class { static #x = #x in ! 0 + 0 ; } ;
new class { static #x = #x in super [ 0 ?. x [ true . #x . x ] . #x ] ; } ;
new class { static #x = #x in - { } . #x ; } ;
new class { static #x = super [ -- function ( ) { } ( ) [ #x in [ ] ] ] ; } ;
new class { static #x = #x in typeof x . #x ; } ;
new class { static #x = #x in typeof 0 . x . x ; } ;
new class { static #x = - 0 != #x in { } ; } ;
new class { static #x = #x in super [ 0 ?. x [ super [ '' . x ] ] . #x ] ; } ;
new class { static #x = #x in super . x << 0 ; } ;
new class { static #x = #x in super [ 0 ?. [ #x in '' . x ] . #x ] ; } ;
new class { static #x = #x in 1n . #x ( ) [ 0 ] ; } ;
new class { static #x = #x in super [ 0 ] . x . x ; } ;
new class { static #x = #x in - 0 ( ) . #x ; } ;
new class { static #x = #x in { [ #x in this ] : ( ) => { throw 0 ; } } % ! 1 ; } ;
new class { static #x = 0 ^ 0 | #x in [ ] ?? 0 ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in + ! function * ( ) { } ( ) ( ) . #x } ] ; } ;
new class { static #x = #x in 0 . #x . #x - 0 ; } ;
new class { static #x = #x in 0 ?. [ ! 0 ] . #x ; } ;
new class { static #x = #x in ! 0 / '' >= 0 ; } ;
new class { static #x = #x in 0 ?. x ( ) . #x . #x ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in function ( ) { } ( ) . #x ?. x , ] ; } ;
new class { static #x = #x in 0 >> ~ 0 ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ; var x ;
new class { static #x = #x in super . x - 0 ; } ;
new class { static #x = #x in + class extends super [ 0 ] { ; } ; } ;
new class { static #x = #x in null . #x >= 0 ; } ;
new class { static #x = #x in super . x ( ) [ 0 ] ; } ;
new class { static #x = #x in function ( ) { } ( ) . #x << 0 ; } ;
new class { static #x = #x in 0 > 0 ; } ;
new class { static #x = #x in x ** ~ + 0 ; } ;
new class { static #x = #x in 0 >>> 0 ( ) . #x ** 0 ; } ;
new class { static #x = #x in 0n + '' ; } ;
new class { static #x = #x in 1n . #x `` . x ; } ;
new class { static #x = 0 != #x in [ true . #x `` `` , ] ; } ;
new class { static #x = #x in ~ true . #x ; } ;
new class { static #x = #x in `` ?. x . #x ; } ;
new class { static #x = #x in typeof 0 . x ; } ;
new class { static #x = #x in 0 ?. #x . #x ( ) . #x ; } ;
new class { static #x = #x in + null . #x . #x ; } ;
new class { static #x = #x in { } << 0 ; } ;
let x ; new class { static #x = #x in x ; } ;
new class { static #x = super [ #x in null . #x `` * 1 ] ; } ;
new class { static #x = super [ #x in null . #x ] ; } ;
new class { static #x = #x in { } >>> 0 ; } ;
new class { static #x = #x in super . x ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : x => 0 } % ! 1 ; } ;
new class { static #x = #x in 0 << 1n . #x ; } ;
new class { static #x = 0 ^ 0 | #x in 0 . #x ?? 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 ( ) . #x ; } } % ! 1 ; } ;
new class { static #x = #x in - null ; } ;
new class { static #x = #x in new function ( [ ] ) { } ; } ;
new class { static #x = #x in 0 >>> x ; } ;
new class { static #x = super [ #x in super . x % { [ #x in x ] : x => 0 } ] ; } ;
new class { static #x = #x in 0 + '' . #x ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ! 0 * null . #x ** ~ 0 , ] ; } ;
new class { static #x = #x in 0 << 0 . x . #x . #x ; } ;
new class { static #x = #x in 0n ?. x % 0 ; } ;
new class { static #x = #x in + { } . #x . #x ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in null . x ] ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in { } ?. x , ] ; } ;
new class { static #x = #x in super . x . x ; } ;
new class { static #x = #x in null . x ++ ; } ;
new class { static #x = #x in - null . #x ; } ;
new class { static #x = #x in super [ 0 ?. x . x . #x . x . #x ] ; } ;
new class { static #x = #x in [ #x in [ ] , , ] >= { [ Symbol . toPrimitive ] : `` } ; } ;
new class { static #x = #x in super [ 0 ?. x [ #x in 0 ] . #x ] ; } ;
new class { static #x = #x in super [ 0 ?. x [ null . #x . x ] . #x ] ; } ;
new class { static #x = #x in [ ] . x ++ ; } ;
new class { static #x = super [ #x in 0 . x ] ; } ;
new class { static #x = #x in 0 . #x >> 0 ; } ;
new class { static #x = #x in + null . #x ; } ;
new class { static #x = super . x [ 0 | 0 == #x in 0 . #x instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in - x ; } ;
new class { static #x = #x in '' . #x << 0 ; } ;
new class { static #x = #x in + 0 . x . x . #x ; } ;
new class { static #x = 0 != #x in [ 0 & #x in '' . #x , ] ; } ;
new class { static #x = #x in 0 >> null . #x ; } ;
new class { static #x = #x in 0 ?. [ [ ] . #x ] . #x ; } ;
new class { static #x = #x in void new super . x ( ) ; } ;
new class { static #x = #x in x . x . #x ; } ;
new class { static #x = #x in + true . #x . #x ; } ;
new class { static #x = #x in { } . #x << 0 ; } ;
new class { static #x = 0 != #x in [ 0 . x . #x , ] ; } ;
new class { static #x = #x in typeof new 1n . #x . #x ( ) ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : `` } ; } ;
new class { static #x = 0 != #x in [ 0 . #x = 0 || #x in super [ 0 ] , ] ; } ;
new class { static #x = #x in typeof 0 . #x ; } ;
new class { static #x = #x in new this ; } ;
new class { static #x = #x in 0 [ 0 ] . x . #x ; } ;
new class { static #x = #x in - ! ! 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : - 0 } ** 0 ** 0 >= 0 ; } ;
new class { static #x = #x in [ #x in new 0 , , ] >= 0 ; } ;
new class { static #x = #x in + super . x . x ; } ;
new class { static #x = #x in 0 >>> new . target . #x ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => 0 . #x . #x } ] ; } ;
new class { static #x = #x in typeof 0 ; } ;
new class { static #x = #x in null . #x ** ~ 0 ; } ;
new class { static #x = #x in + import ( 0 . x ??= 0 . #x ) ; } ;
new class { static #x = #x in 0 << true . #x ; } ;
new class { static #x = #x in `${ { [ 1n . x . #x ] : x } }` >= 0 ; } ;
new class { static #x = #x in new function ( ) { } ; } ;
new class { static #x = #x in 0 . #x - 0 ; } ;
new class { static #x = #x in 0n ?. x ( ) . #x ; } ;
new class { static #x = #x in [ ] < 0 in 0 . #x . #x >= - 0 ; } ;
new class { static #x = #x in 0 . x . #x ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ; let x ;
new class { static #x = #x in super [ 0 ?. x [ #x in super . x ] . #x ] ; } ;
new class { static #x = 0 != #x in [ 0 . #x = #x in null . x , ] ; } ;
new class { static #x = #x in super [ 0 ?. #x ] ; } ;
new class { static #x = #x in null . x -- ; } ;
new class { static #x = #x in 1n . #x . x ; } ;
new class { static #x = super . x [ super [ 0 , #x in '' . #x , [ , ] ] *= 0 ] . #x ; } ;
new class { static #x = #x in + new 0 ; } ;
new class { static #x = super . x [ 0 | 0 == #x in x instanceof 0 instanceof 0 >>> 0 - 0 > 0 ] . #x ; } ;
new class { static #x = #x in 1 ** [ ] . #x ; } ;
