( async x => { for await ( let x of { [ Symbol . asyncIterator ] : x => await } ) ; } ) ( ) ; 
( async x => { for await ( let x of { [ Symbol . iterator ] : x => await } ) ; } ) ( ) ;
( async x => { for await ( var x of { [ Symbol . asyncIterator ] : x => await } ) ; } ) ( ) ; 
( async x => { for await ( var x of { [ Symbol . iterator ] : x => await } ) ; } ) ( ) ; 
( await => 0 ) ( ) ; 
( await => await ) ( ) ; 
( x => await ) ( ) ; 
( x => await ) ( ) ; class await { } 
( x => await ) ( ) ; function * await ( ) { } 
( x => await ) . call ( 0 ) ; 
( x => x => await ) ( ) ?. ( ) ; 
+ { [ Symbol . toPrimitive ] : x => await } ;
- [ { [ Symbol . toPrimitive ] : x => await } ] ;
- { [ Symbol . toPrimitive ] : x => await } ; 
-- [ { [ Symbol . toPrimitive ] : x => await } ] [ 0 ] ; 
0 != { [ Symbol . toPrimitive ] : x => await } ; 
0 & { [ Symbol . toPrimitive ] : x => await } ;
0 ( ... { [ Symbol . iterator ] : x => await } ) ;
0 ( 0 , ... { [ Symbol . iterator ] : x => await } ) ;
0 ** { [ Symbol . toPrimitive ] : x => await } ; 
0 . __defineGetter__ ( { [ Symbol . toPrimitive ] : x => await } , x => 0 ) ;
0 . __lookupGetter__ ( { [ Symbol . toPrimitive ] : x => await } ) ;
0 . __lookupSetter__ ( { [ Symbol . toPrimitive ] : x => await } ) ;
0 . hasOwnProperty ( { [ Symbol . toPrimitive ] : x => await } ) ;
0 . propertyIsEnumerable ( { [ Symbol . toPrimitive ] : x => await } ) ;
0 . toString ( { [ Symbol . toPrimitive ] : x => await } ) ;
0 << ( x => await ) ?. ( ) ;
0 << { [ Symbol . toPrimitive ] : x => await } ;
0 <= { [ Symbol . toPrimitive ] : x => await } ; 
0 > { [ Symbol . toPrimitive ] : x => await } ; 
0 ?. [ { [ Symbol . toPrimitive ] : x => await } ] ;
0 ^ { [ Symbol . toPrimitive ] : x => await } ; 
0 instanceof { [ Symbol . hasInstance ] : x => await } ;
0 | { [ Symbol . toPrimitive ] : x => await } ; 
0n . toString ( { [ Symbol . toPrimitive ] : x => await } ) ;
1 ** { [ Symbol . toPrimitive ] : x => await } ** 0 ; 
1 . hasOwnProperty ( { [ Symbol . toPrimitive ] : x => await } ) ; 
1 . toString ( { [ Symbol . toPrimitive ] : x => await } ) ; 
1 < { [ Symbol . toPrimitive ] : x => await } ; 
AggregateError ( { [ Symbol . iterator ] : x => await } ) ;
Array . from ( [ , ] , x => await ) ; 
Array . from ( [ 0 ] , x => await ) ;
Array . from ( x => 0 , x => await ) ; 
Array . from ( { [ Symbol . iterator ] : x => await } ) ; 
Array . prototype . at ( { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . at . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . copyWithin ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
Array . prototype . copyWithin ( { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . every . call ( [ 0 ] , x => await ) ; 
Array . prototype . every . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
Array . prototype . fill ( 0 , 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
Array . prototype . fill ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . fill . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . filter . call ( [ 0 ] , x => await ) ;
Array . prototype . filter . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . find . call ( [ 0 ] , x => await ) ; 
Array . prototype . find . call ( x => 0 , x => await ) ;
Array . prototype . find . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . findIndex . call ( [ 0 ] , x => await ) ; 
Array . prototype . findIndex . call ( x => 0 , x => await ) ;
Array . prototype . flat ( { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . flat . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . flatMap . call ( [ 0 ] , x => await ) ; 
Array . prototype . forEach . call ( [ 0 ] , x => await ) ; 
Array . prototype . includes . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
Array . prototype . lastIndexOf . call ( [ 0 ] , 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
Array . prototype . lastIndexOf . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . map . call ( [ 0 ] , x => await ) ; 
Array . prototype . reduce . call ( [ 0 , 0 ] , x => await ) ; 
Array . prototype . reduce . call ( [ 0 ] , x => await , 0 ) ; 
Array . prototype . reduce . call ( { length : { [ Symbol . toPrimitive ] : await => x } } ) ;
Array . prototype . reduceRight . call ( [ 0 ] , x => await , 0 ) ; 
Array . prototype . reduceRight . call ( `${ { } }` , x => await ) ; 
Array . prototype . reduceRight . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
Array . prototype . reverse . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
Array . prototype . slice ( { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . some . call ( [ 0 ] , x => await ) ; 
Array . prototype . some . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ; 
Array . prototype . splice ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
Array . prototype . splice ( { [ Symbol . toPrimitive ] : x => await } ) ;
Array . prototype . unshift . call ( { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
BigInt ( { [ Symbol . toPrimitive ] : x => await } ) ;
BigInt . asIntN ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
BigInt . asIntN ( { [ Symbol . toPrimitive ] : x => await } ) ;
BigInt . asUintN ( { [ Symbol . toPrimitive ] : x => await } ) ;
Error ( { [ Symbol . toPrimitive ] : x => await } ) ;
Error . prototype . toString . call ( { message : { [ Symbol . toPrimitive ] : x => await } } ) ;
Function ( { [ Symbol . toPrimitive ] : x => await } ) ;
Function . apply . call ( x => await ) ;
Function . apply . call ( x => await , 0 , [ ] ) ; 
Function . call . call ( x => await ) ;
Number ( { [ Symbol . toPrimitive ] : x => await } ) ;
Number . prototype . toPrecision ( { [ Symbol . toPrimitive ] : x => await } ) ;
Object . assign ( [ ] , { length : { [ Symbol . toPrimitive ] : x => await } } ) ;
Object . defineProperty ( [ ] , { [ Symbol . toPrimitive ] : x => await } ) ;
Object . defineProperty ( { } , { [ Symbol . toPrimitive ] : x => await } ) ; 
Object . fromEntries ( { [ Symbol . iterator ] : x => await } ) ;
Object . fromEntries . call ( 0 , [ [ { [ Symbol . toPrimitive ] : x => await } ] , ] ) ;
Object . getOwnPropertyDescriptor ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ;
Object . hasOwn ( '' , { [ Symbol . toPrimitive ] : x => await } ) ;
Object . hasOwn ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
Promise . all ( { [ Symbol . iterator ] : x => await } ) ;
Promise . allSettled ( { [ Symbol . iterator ] : x => await } ) ;
Promise . any ( [ { then : x => await } ] ) ; 
Promise . any ( { [ Symbol . iterator ] : x => await } ) ;
Promise . prototype . catch . call ( { then : x => await } ) ;
Promise . race ( { [ Symbol . iterator ] : x => await } ) ;
Promise . resolve ( { then : x => await } ) ;
String ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . at ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . at . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . charAt ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . charAt . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . charCodeAt ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . concat ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . concat . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . endsWith ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . endsWith ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . endsWith . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . includes ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . includes ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . includes . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . indexOf ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . indexOf . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . lastIndexOf ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . lastIndexOf . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . normalize ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . normalize . call ( { [ Symbol . toPrimitive ] : x => await } , 0 ) ; 
String . prototype . padEnd ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . padEnd . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . padStart ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . padStart . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . repeat ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . repeat . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . replace ( { [ Symbol . replace ] : x => await } ) ;
String . prototype . replace ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . replace . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . replaceAll ( { [ Symbol . replace ] : x => await } ) ;
String . prototype . replaceAll ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . replaceAll . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . slice ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . slice ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . slice . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . split ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . split ( { [ Symbol . split ] : x => await } ) ;
String . prototype . split ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . split . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . startsWith ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . startsWith ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . startsWith . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . substring ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype . substring ( { [ Symbol . toPrimitive ] : x => await } ) ;
String . prototype . substring . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
String . prototype [ Symbol . iterator ] . call ( { [ Symbol . toPrimitive ] : x => await } ) ; 
Symbol ( { [ Symbol . toPrimitive ] : x => await } ) ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return { then : x => await } ; } } ;
[ , ] = { [ Symbol . iterator ] : await => x } ; 
[ , ] = { [ Symbol . iterator ] : x => await } ;
[ ] = { [ Symbol . iterator ] : await => x } ; 
[ ] = { [ Symbol . iterator ] : x => await } ;
[ x => await ] ?. [ 0 ] ( ) ;
[ { [ Symbol . toPrimitive ] : x => await } ] [ 0 ] != 0 ; 
[ { [ Symbol . toPrimitive ] : x => await } ] [ 0 ] ++ ;
[ { [ Symbol . toPrimitive ] : x => await } ] [ 0 ] += 0 ; 
[ { [ Symbol . toPrimitive ] : x => await } ] [ 0 ] /= 0 ; 
`${ 0 }${ 0 }${ { [ Symbol . toPrimitive ] : x => await } }` ; 
`${ 0 }${ { [ Symbol . toPrimitive ] : x => await } }` ;
`${ { [ Symbol . toPrimitive ] : x => await } }` ;
`` . __defineSetter__ ( { [ Symbol . toPrimitive ] : x => await } , x => 0 ) ; 
async function x ( ) { ; for await ( let x of [ { then : x => await } ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ { then : x => await } ] ) ; } x ( ) ;
await : ; 
await ; 
await ; var await ;
class await { } for ( var x of function * ( ) { yield await ; } ( ) ) ; 
class await { } var x = await ;
class x { 0 = await ; } new x ( ) ;
class x { set [ await . #x ] ( x ) { } get #x ( ) { } } 
for ( 0 [ ( x => x => await ) ( ) ( ) ] of [ 0 ] ) ; 
for ( ; await ; 0 ) ; class await { } 
for ( let x ; await ; ) ; 
for ( let x ; await ; ) var await ;
for ( let x ; await ; 0 ) ;
for ( let x ; await ; 0 ) ; class await { }
for ( let x ; await ; 0 ) var await ;
for ( let x in [ 0 ] ) await ;
for ( let x of [ , ] ) await ; 
for ( let x of [ 0 ] ) await ;
for ( var await of [ 0 ] ) ;
for ( var x ; await ; ) ; 
for ( var x ; await ; 0 ) ;
for ( var x ; await ; 0 ) ; class await { } 
for ( var x in [ 0 ] ) await ;
for ( var x in { x } ) await ; 
for ( var x of [ 0 ] ) await ;
for ( var x of function * ( ) { ; yield await ; } ( ) ) ; class await { } 
for ( var x of function * ( ) { yield * await ; } ( ) ) ; 
for ( var x of function * ( ) { yield * { [ Symbol . iterator ] : x => await } ; } ( ) ) ; 
for ( var x of function * ( ) { yield await ; } ( ) ) ; 
for ( var x of { [ Symbol . iterator ] : x => await } ) ; 
for ( x of { [ Symbol . iterator ] : x => await } ) ; 
function await ( ) { } class x extends await { ; } 
isFinite ( { [ Symbol . toPrimitive ] : x => await } ) ;
isNaN ( { [ Symbol . toPrimitive ] : x => await } ) ;
let await , x ;
let await ;
let await ; await ;
let await ; var [ ] = await ;
let x ; [ await = 0 ] = `` ; 
let x ; [ await = 0 ] = `` ; class await { } 
let x ; [ x ] = { [ Symbol . iterator ] : x => await } ; 
let x ; [ { 0 : await = 0 } = 0 ] = '' ; 
let x ; [ { 0 : await } = 0 ] = `` ; 
let x ; [ { 0 : await } = 0 ] = `` ; class await { } 
let x ; [ { 0 : x = await } = 0 ] = '' ; 
let x = await ;
let x = await ; function await ( ) { } 
new AggregateError ( 0 , { [ Symbol . toPrimitive ] : x => await } ) ; 
new AggregateError ( { [ Symbol . iterator ] : x => await } ) ; 
new Error ( { [ Symbol . toPrimitive ] : x => await } ) ; 
new Function ( 0 , { [ Symbol . toPrimitive ] : x => await } , 0 ) ; 
new Function ( { [ Symbol . toPrimitive ] : x => await } , 0 ) ; 
new Map ( { [ Symbol . iterator ] : x => await } ) ;
new Set ( { [ Symbol . iterator ] : x => await } ) ;
new WeakMap ( { [ Symbol . iterator ] : x => await } ) ;
new WeakSet ( { [ Symbol . iterator ] : x => await } ) ;
new function ( ... { x , ... await } ) { } ; 
var [ ] = { [ Symbol . iterator ] : x => await } ;
var [ x = await ] = `` ; let await ;
var x = await ; 
var x = await ; class await { } 
var x = { [ Symbol . toPrimitive ] : x => await } | 0 ; 
var { x = await } = 0 ;
x : await : ; 
x : await : break x ;
{ await ; } let await = 0 ; ; 
{ await ; } var await ; 
{ await } ; 
{ { await ; } } 
~ [ , { [ Symbol . toPrimitive ] : x => await } ] ; 
