'' > 1n ** 1n ;
0 & { 0 : 1n ** 1n } ;
0 . x ||= 1n ** ~ 0n ;
0 . x ||= 1n ** ~ 0n ;
0 > 1n ** 1n ;
0n % 1n ** 0n ;
0n ** 0n ; 
0n ** 1n ; 
1n % 1n ** 0n ;
1n * 1n ** { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ;
1n ** 0n ;
1n ** 0n ; 
1n ** 1n ; 
1n ** ~ 0n ;
1n ** ~ 0n ;
1n ** ~ 0n in 0 ;
1n ** ~ 0n in 0 ;
; [ 0n ] [ 0 ] **= 0n ; 
; [ 0n ] [ 0 ] **= 1n ; 
[ 0 , , ... 0 >> 0n ** ~ 0n ] ;
[ 0 , , ... 0 >> 0n ** ~ 0n ] ;
[ 0 || 0 == 0 >= 1n ** 1n ] ;
[ 0 || 0 == 1n >= 1n ** 1n ] ;
[ 0n ** 0n ] ;
[ 1n ** 0n ] ;
for ( ; 0n ** 0n ** 0n ; ) ;
for ( ; ; 0 [ 0 ] |= 0 ) if ( 0n ** 0n ) throw 0 ;
for ( ; ; 0 [ 0 ] |= 0 ) if ( 1n ** { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ) ;
for ( ; ; x => 0 ) if ( 1n ** 0n ) throw 0 ;
let x = 1n ** 1n ;
var { x = 0n ** 0n } = 0 ;
var { x = 1n ** 0n } = 0 ;
