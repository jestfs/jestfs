; async function x ( x = 0 , [ ] , [ ] = 0 ) { }
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * x ( ) ; } } ; async function * x ( ) { }
[ ] instanceof async function ( ) { } ;
async function * x ( ) { function x ( ) { } function x ( ) { } } x ( ) ; 
async function * x ( ) { yield 0 ; } [ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * x ( ) ; } } ; 
async function * x ( ) { }
async function * x ( ... [ x , , ... [ ] ] ) { } x ( ) ; 
async function * x ( ... [ x = 0 , , ... [ ] ] ) { } x ( ) ; 
async function * x ( ... x ) { } x ( 0 ) ; 
async function * x ( [ ] = '' , ... x ) { function x ( ) { } } x ( ) ; 
async function * x ( [ ] = '' , ... x ) { var x , x ; } x ( ) ; 
async function * x ( [ ] = '' , ... x ) { var x ; } x ( ) ; 
async function * x ( x ) { function x ( ) { } function x ( ) { } } x ( ) ; 
async function * x ( x ) { var x ; } x ( ) ; 
async function * x ( x ) { } x ( 0 ) ; 
async function * x ( x = 0 , ) { function x ( ) { } } x ( ) ; 
async function * x ( x = 0 , ) { var x , x ; } x ( ) ; 
async function * x ( x = 0 , ) { var x ; } x ( ) ; 
async function x ( ) { ; const x = 0 ; } x ( ) ; 
async function x ( ) { ; for await ( '' . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( 0 ( ) . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( 0 . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( 0n . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ , 0 , ] [ 1 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ , ] [ 0 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ , x , ] [ 1 ] of [ 0 ] ) var x ; } x ( ) ; 
async function x ( ) { ; for await ( [ 0 ] [ 0 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ ] . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ ] [ 0 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ ] [ 1 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ ] of '' ) ; } x ( ) ; 
async function x ( ) { ; for await ( [ ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( `${ 0 }` [ 0 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( `` [ 0 ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let [ ] of 0 ) ; } x ( ) ; 
async function x ( ) { ; for await ( let [ ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let [ ] of x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of 0 . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of 1n . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of [ 0 ] [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of [ { then : x => await } ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of `` . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of `` [ 0 % 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of `` [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of new . target ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of null . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of this . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of true . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( let x of { [ Symbol . iterator ] : async function * ( ) { } } ) break ; } x ( ) ; 
async function x ( ) { ; for await ( let x of { } . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( null . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( this . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( true . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of '' . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of 0 . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of 1n . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of `` [ 0 % 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of `` [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of async function * ( ) { yield 0 ; } ?. ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of async function * ( ) { yield 0 ; } ?. ( ) ) break ; } x ( ) ; 
async function x ( ) { ; for await ( var x of async function * ( ) { yield ; } ?. ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of async function * ( ) { yield ; } ?. ( ) ) break ; } x ( ) ; 
async function x ( ) { ; for await ( var x of async function * ( ) { } ?. ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of null . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of true . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of x . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of { x } . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var x of { } . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( var { } of [ , ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( var { } of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( var { } of x ) ; let x ; } x ( ) ; 
async function x ( ) { ; for await ( var { } of x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of ! 0 ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of '' ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of '' . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0 ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0 . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0 ?. ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0 ?. x ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0n ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of 0n . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of [ 0 ] ) ; let x ; } x ( ) ; 
async function x ( ) { ; for await ( x of [ 0 ] ) var x ; } x ( ) ; 
async function x ( ) { ; for await ( x of [ ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of [ async function ( ) { throw 0 ; } ( ) ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of [ { then : ( ) => { throw 0 ; } } ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of `` [ 0 % 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of `` [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of async function * ( ) { } ?. ( ) ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of new 0 ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of null ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of null . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of this ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of this . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of true . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of x ) ; let x ; } x ( ) ; 
async function x ( ) { ; for await ( x of x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of x . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ 0 ?? 0 ] : await 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : [ ] } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : class { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : function ( ) { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : function * ( ) { throw 0 ; } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : function * ( ) { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : x => new 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . asyncIterator ] : x => { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : [ ] } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : class { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : function ( ) { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : x => new 0 } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { [ Symbol . iterator ] : x => { } } ) ; } x ( ) ; 
async function x ( ) { ; for await ( x of { x } . x ) ; } x ( ) ; 
async function x ( ) { ; for await ( { get x ( ) { } } . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( { x = 0 } of [ { x } ] ) ; } x ( ) ; 
async function x ( ) { ; for await ( { x } . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { await '' . x ; } x ( ) ; 
async function x ( ) { await ( async x => 0 ) ( ) ; } x ( ) ; 
async function x ( ) { await ( async x => new 0 ) ( ) ; } x ( ) ; 
async function x ( ) { await 0 . x ; } x ( ) ; 
async function x ( ) { await 0 ; } x ( ) ; 
async function x ( ) { await 0 ?. ( ) ; } x ( ) ; 
async function x ( ) { await 0 ?. x ( ) ; } x ( ) ; 
async function x ( ) { await 0n . x ; } x ( ) ; 
async function x ( ) { await `${ 0 }` [ 0 ] ; } x ( ) ; 
async function x ( ) { await `` [ 0 % 0 ] ; } x ( ) ; 
async function x ( ) { await `` [ 0 ] ; } x ( ) ; 
async function x ( ) { await null . x ; } x ( ) ; 
async function x ( ) { await this . x ; } x ( ) ; 
async function x ( ) { await true . x ; } x ( ) ; 
async function x ( ) { await x . x ; } x ( ) ; 
async function x ( ) { await x ; let x ; } x ( ) ; 
async function x ( ) { await x ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { return ; } , } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { return ; } } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { throw 0 ; } , } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { throw 0 ; } } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { throw super [ 0 ] ??= 0 ; } , } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { throw super [ await ] ??= 0 ; } , } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { throw super [ super [ 0 ] %= 0 ] ??= 0 ; } , } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { get 0 ( ) { } } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { set 0 ( x ) { } } [ 0 ] ; } x ( ) ; 
async function x ( ) { await { then : class { } } ; } x ( ) ; 
async function x ( ) { await { then : x => 0 } ; } x ( ) ; 
async function x ( ) { const x = 0 ; } x ( ) ; 
async function x ( ) { for await ( 0 ( ) . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( 0 . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( 0 . x of [ x ] ) ; } x ( ) ; 
async function x ( ) { for await ( [ 0 ] [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( [ ] . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( [ ] [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( [ ] [ 1 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( `${ 0 }` [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( `` [ 0 / 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( `` [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( let [ ] of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( let [ ] of x ) ; } x ( ) ; 
async function x ( ) { for await ( let [ ] of x ) var x ; } x ( ) ; 
async function x ( ) { for await ( let x of ! 0 ) ; } x ( ) ; 
async function x ( ) { for await ( let x of ! x ) ; } x ( ) ; 
async function x ( ) { for await ( let x of '' ) ; } x ( ) ; 
async function x ( ) { for await ( let x of 0 ) ; } x ( ) ; 
async function x ( ) { for await ( let x of 0 . x ) ; } x ( ) ; 
async function x ( ) { for await ( let x of 1n ) ; } x ( ) ; 
async function x ( ) { for await ( let x of [ 0 ] ) 0 ; } x ( ) ; 
async function x ( ) { for await ( let x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( let x of [ 0 ] ) break ; } x ( ) ; 
async function x ( ) { for await ( let x of [ 0 ] ) continue ; } x ( ) ; 
async function x ( ) { for await ( let x of [ 0 ] ) return ; } x ( ) ; 
async function x ( ) { for await ( let x of `` . x ) ; } x ( ) ; 
async function x ( ) { for await ( let x of async function * ( ) { } ( ) ) ; } x ( ) ; 
async function x ( ) { for await ( let x of async function * ( ) { } ( ) ) continue ; } x ( ) ; 
async function x ( ) { for await ( let x of new . target ) ; } x ( ) ; 
async function x ( ) { for await ( let x of null ) ; } x ( ) ; 
async function x ( ) { for await ( let x of this ) ; } x ( ) ; 
async function x ( ) { for await ( let x of this . x ) ; } x ( ) ; 
async function x ( ) { for await ( let x of x ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . asyncIterator ] : function * ( ) { yield x ; } } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . asyncIterator ] : function * ( ) { } } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . asyncIterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : class { } } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : function ( ) { } } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : x => new 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( let x of { [ Symbol . iterator ] : x => { } } ) ; } x ( ) ; 
async function x ( ) { for await ( this . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ async function ( ) { } ( ) ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ async function ( ) { } ?. ( ) ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ x ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ { then : x => 0 } ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of [ { then : x => await } ] ) ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of x ) ; let x ; } x ( ) ; 
async function x ( ) { for await ( var [ ] of x ) ; } x ( ) ; 
async function x ( ) { for await ( var x of ! 0 ) ; } x ( ) ; 
async function x ( ) { for await ( var x of '' . x ) ; } x ( ) ; 
async function x ( ) { for await ( var x of '' [ 0 % 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( var x of '' [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( var x of 0 ) ; } x ( ) ; 
async function x ( ) { for await ( var x of 0 . x ) ; } x ( ) ; 
async function x ( ) { for await ( var x of 1n ) ; } x ( ) ; 
async function x ( ) { for await ( var x of [ 0 ] ) 0 ; } x ( ) ; 
async function x ( ) { for await ( var x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( var x of [ 0 ] ) break ; } x ( ) ; 
async function x ( ) { for await ( var x of [ 0 ] ) continue ; } x ( ) ; 
async function x ( ) { for await ( var x of [ 0 ] ) return ; } x ( ) ; 
async function x ( ) { for await ( var x of `` ) ; } x ( ) ; 
async function x ( ) { for await ( var x of async function * ( ) { } ( ) ) ; } x ( ) ; 
async function x ( ) { for await ( var x of async function * ( ... [ ] ) { } ( ) ) ; } x ( ) ; 
async function x ( ) { for await ( var x of new 0 ) ; } x ( ) ; 
async function x ( ) { for await ( var x of null ) ; } x ( ) ; 
async function x ( ) { for await ( var x of x ) ; } x ( ) ; 
async function x ( ) { for await ( var x of x . x ) ; } x ( ) ; 
async function x ( ) { for await ( var x of x ||= await 0 ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . asyncIterator ] : function * ( ) { } } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . asyncIterator ] : x => x => 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : class { } } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : function ( ) { } } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : x => new 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( var x of { [ Symbol . iterator ] : x => { } } ) ; } x ( ) ; 
async function x ( ) { for await ( var { } of [ x ] ) ; } x ( ) ; 
async function x ( ) { for await ( x . x of [ , 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( x . x of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( x of ! 0 ) ; } x ( ) ; 
async function x ( ) { for await ( x of '' ) ; } x ( ) ; 
async function x ( ) { for await ( x of 0 ) ; } x ( ) ; 
async function x ( ) { for await ( x of 0 . x ) ; } x ( ) ; 
async function x ( ) { for await ( x of 1n ) ; } x ( ) ; 
async function x ( ) { for await ( x of [ , ] ) ; let x ; } x ( ) ; 
async function x ( ) { for await ( x of [ , ] ) var x ; } x ( ) ; 
async function x ( ) { for await ( x of `` . x ) ; } x ( ) ; 
async function x ( ) { for await ( x of `` [ 0 % 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( x of `` [ 0 ] ) ; } x ( ) ; 
async function x ( ) { for await ( x of new 0 ) ; } x ( ) ; 
async function x ( ) { for await ( x of null ) ; } x ( ) ; 
async function x ( ) { for await ( x of this ) ; } x ( ) ; 
async function x ( ) { for await ( x of this . x ) ; } x ( ) ; 
async function x ( ) { for await ( x of x ) ; let x ; } x ( ) ; 
async function x ( ) { for await ( x of x ) ; } x ( ) ; 
async function x ( ) { for await ( x of x ) var x ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . asyncIterator ] : function * ( ) { } } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . asyncIterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . asyncIterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : class { } } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : x => 0 } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : x => [ ] } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : x => await } ) ; } x ( ) ; 
async function x ( ) { for await ( x of { [ Symbol . iterator ] : x => { } } ) ; } x ( ) ; 
async function x ( ) { for await ( { get 0 ( ) { } , } [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( { set 0 ( [ ] ) { } , } [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( { set 0 ( x ) { } , } [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( { set [ 0 ] ( x ) { ; } , } [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( { set [ 0 ] ( x ) { throw 0 ; ; } , } [ 0 ] of [ , ] ) ; } x ( ) ; 
async function x ( ) { for await ( { } of '' ) ; } x ( ) ; 
async function x ( ) { for await ( { } of [ , ] ) ; } x ( ) ; 
async function x ( ) { function x ( ) { } function x ( ) { } } x ( ) ; 
async function x ( ) { let x ; await x ; } x ( ) ; 
async function x ( ) { var x ; for await ( let [ ] of x ) ; } x ( ) ; 
async function x ( ) { var x ; for await ( x of x ) ; } x ( ) ; 
async function x ( ) { var x ; for await ( { x = 0 } of [ 0 ] ) ; } x ( ) ; 
async function x ( ) { x : do break x ; while ( 0 ) ; } x ( ) ; 
async function x ( ) { x : do continue x ; while ( 0 ) ; } x ( ) ; 
async function x ( ) { }
async function x ( ... x ) { } x ( 0 ) ; 
async function x ( [ ] ) { } [ async function ( ) { ; await x ( ) ; } ( ) ] ;
async function x ( x = 0 ) { function x ( ) { } } x ( ) ; 
async function x ( x = 0 ) { var x , x ; } x ( ) ; 
async function x ( x = 0 ) { var x ; } x ( ) ; 
class x { x ( ) { } }
for ( var x of function * x ( ) { yield x ; } ( ) ) ; 
for ( var x of function * x ( ) { yield { x } ?. x ; } ( ) ) ; 
function * x ( ) { const x = 0 ; } x ( ) ; 
function * x ( ) { function x ( ) { } function x ( ) { } } x ( ) ; 
function * x ( ) { }
function * x ( ) { } [ , ... function * ( ) { yield * x ( ) ; yield * `` ; } ( ) ] ;
function * x ( ... x ) { } x ( 0 ) ;
function * x ( [ ] = 0 , [ ] , x ) { }
function * x ( x ) { var x ; } x ( ) ; 
function * x ( x ) { } x ( 0 ) ; 
function * x ( x = 0 ) { var await ; } x ( ) ; 
function * x ( x = 0 ) { var x , x ; } x ( ) ; 
function * x ( x = 0 ) { var x ; } x ( ) ; 
var x = { x , async x ( ) { } } ; 
x ( 0 ) ; async function * x ( ... [ ] ) { } 
x ( 0 ) ; async function * x ( x ) { } 
x ( 0 ) ; async function x ( ... x ) { } 
x ( 0 ) ; function * x ( ... x ) { } 
