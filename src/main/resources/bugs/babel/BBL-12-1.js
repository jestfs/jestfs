[ , 0 , , ... { [ Symbol . iterator ] : async function * ( { 0 : x , } ) { } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : async function * ( { [ 0 ] : x , } ) { } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * { [ Symbol . iterator ] : async function x ( ) { } } ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield typeof `${ yield * { [ Symbol . iterator ] : async function ( x ) { } } }` ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield * { [ Symbol . iterator ] : async function ( x ) { } } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 [ 0 ] ??= yield * { [ Symbol . iterator ] : async x => 0 } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield import ( yield * { [ Symbol . iterator ] : async function ( ) { } } ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : async function * ( [ ] ) { } } ] ; 
[ ] = { [ Symbol . iterator ] : async function * ( ) { const x = 0 ; } } ; 
[ ] = { [ Symbol . iterator ] : async function * ( ) { } } ; 
for ( ; async function * ( [ ] ) { } ( ) ; ) ; 
for ( [ ] of [ { [ Symbol . iterator ] : async function * ( ) { const { x , } = 0 ; } } , ] ) ; 
for ( [ ] of [ { [ Symbol . iterator ] : async function * ( ) { } } , ] ) ; 
for ( var { } of { [ Symbol . iterator ] : async function * ( ) { try { while ( await this ) ; } finally { } } } ) ; 
for ( x of { [ Symbol . iterator ] : async function * ( ) { var [ ] = this ; } } ) ; 
for ( x of { [ Symbol . iterator ] : async function * ( ) { yield * x ( ) ; } } ) ; let x ; 
let [ [ ] , ] = function * ( ) { if ( yield * { [ Symbol . iterator ] : async x => 0 } ) ; } ( ) ; 
let [ ] = { [ Symbol . iterator ] : async function * ( ) { } } ; 
let [ x , , ... [ ] ] = function * ( ) { do ; while ( yield * { [ Symbol . iterator ] : async function ( x ) { } } ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { if ( yield * { [ Symbol . iterator ] : async function ( x ) { } } ) ; else ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { return yield * { [ Symbol . iterator ] : async function ( x ) { } } ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { throw yield * `${ 0 }${ yield * { [ Symbol . iterator ] : async x => 0 } }` ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { throw yield * { [ Symbol . iterator ] : async x => 0 } ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { throw yield * { [ Symbol . iterator ] : async x => { } } ; } ( ) ; 
let x = async x => { for await ( [ ] of [ { [ Symbol . iterator ] : async function * ( ) { } } ] ) ; } ; x ( ) ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { let [ ] = this ; } } ; 
var x = async x => { ; for await ( [ ] of [ { [ Symbol . iterator ] : async function * ( ) { } } ] ) ; } ; x ( ) ; 
