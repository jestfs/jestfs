! { ... 0n ** 0n } ; 
'' > 1n ** 1n ;
- { ... 1n ** 1n } ; 
- { 1 : 1n ** 1n } ; 
0 & `${ 0n ** 0n }` ; 
0 & `${ 0n ** 1n }` ; 
0 & { 0 : 1n ** 1n } ;
0 . x ||= 1n ** ~ 0n ;
0 . x ||= 1n ** ~ 0n ;
0 <= 0n ** 0n ; 
0 <= 1n ** 0n ; 
0 > 1n ** 1n ;
0 >> 0 + 1n ** ~ 0n ; 
0 ? 0 : 0n ** 0n ; 
0 ? 0 : 1n ** 0n ; 
0n % 1n ** 0n ;
0n ** 0n !== 0 ; 
0n ** 0n !== 1n ; 
0n ** 0n ; 
0n ** 1n !== 0 ; 
0n ** 1n ; 
1n % 1n ** 0n ;
1n * 1n ** { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ;
1n ** 0n ;
1n ** 0n ; 
1n ** 1n ; 
1n ** ~ 0n ;
1n ** ~ 0n ;
1n ** ~ 0n in 0 ;
1n ** ~ 0n in 0 ;
1n - 0n ** 1n ; 
; [ 0n ] [ 0 ] **= 0n ; 
; [ 0n ] [ 0 ] **= 1n ; 
[ , 1 ** 1n ** ~ - 0n ] ; 
[ , 1n ** 1n ] ; 
[ 0 , , ... 0 >> 0n ** ~ 0n ] ;
[ 0 , , ... 0 >> 0n ** ~ 0n ] ;
[ 0 || 0 == 0 >= 1n ** 1n ] ;
[ 0 || 0 == 1n >= 1n ** 1n ] ;
[ 0n ** 0n ] ;
[ 1n ** 0n ] ;
class x { static 0 = 0n ** 0n ; } 
class x { static 0 = 0n ** 1n ; } 
class x { static 0 = super [ 1n ** ~ - - 1n % 0 ] ; } 
for ( 0n ** 0n ; ; ) break ; 
for ( 0n ** ~ 0n ; ; ) 0 ; 
for ( 1n ** 0n ; ; ) break ; 
for ( ; 0n ** 0n ** 0n ; ) ;
for ( ; 0n ** 1n ; ) ; 
for ( ; ; 0 [ 0 ] |= 0 ) if ( 0n ** 0n ) throw 0 ;
for ( ; ; 0 [ 0 ] |= 0 ) if ( 1n ** { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ) ;
for ( ; ; x => 0 ) if ( 1n ** 0n ) throw 0 ;
for ( let x in 0n ** 0n ) ; 
for ( let x in 0n ** 1n ) ; 
for ( var x in 0n ** 0n ) ; 
for ( var x in 0n ** 1n ) ; 
for ( var x in [ 0n ] [ 0 ] **= 0n ) ; 
for ( var x in [ 1n ] [ 0 ] **= 0n ) ; 
if ( 1n ** 1n ) ; 
if ( 1n ** 1n ) ; else ; 
if ( 1n ** 1n ) if ( 0 ) ; else 0 ; 
if ( 1n ** 1n ) if ( 0 ) ; else throw 0 ; 
if ( 1n ** 1n ) if ( 0n ) ; else ; 
if ( 1n ** 1n ) if ( 1 ) ; else ; 
if ( 1n ** 1n ) if ( 1n ) ; else ; 
if ( 1n ** 1n ) if ( `` ) ; else ; 
if ( 1n ** 1n ) x : throw 0 ; 
let x = 1n ** 1n ;
new class { 0 = 0n ** 0n ; } ; 
new class { 0 = 0n ** 1n ; } ; 
new function ( ) { return 0n ** 0n ; } ; 
new function ( ) { return 0n ** 1n ; } ; 
new function ( ) { return 1n ** 1n ; } ; 
switch ( 0 ) { default : case 1n ** 1n : } 
var x = x => 1n ** 1n ; x ( ) ; 
var { x = 0n ** 0n } = 0 ;
var { x = 1n ** 0n } = 0 ;
x : switch ( 0n ** 0n ) { } 
x : switch ( 1n ** 0n ) { } 
x : switch ( 1n ** 1n ) { } 
