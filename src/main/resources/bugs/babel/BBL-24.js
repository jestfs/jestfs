[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * 0 ( yield * [ 0 , , yield , , ] ) ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * [ yield * 0 , , ] ; } } ] ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield * 0 ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield * yield 0 ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield 0 . x . x ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield 0 . x ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield 0 ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield new 0 ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield x ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * ( ) { return yield * [ 0 , , yield { } ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * ! 0 ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * '' ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * 0 . x ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * 0 ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * [ 0 ] ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * [ x ] ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * new 0 ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * null ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield * x ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield 0 . x ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield 0 [ 0 ] . x ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield 0 ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield new 0 ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { if ( yield * [ , yield x ] ) ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * ! 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * '' , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * - 0 ( ) , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 ** ~ 0 % 1 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 ** ~ 0 * 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 ** ~ 0 * 1 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 ** ~ 0 * ~ 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 ** ~ import ( yield ) * 1 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 . x . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 1n , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ 0 ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ import ( 0 . x %= 0 ) ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ x ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ { then : ( ) => { throw 0 ; } } ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * `` . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * new 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * null , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . asyncIterator ] : ( ) => { throw 0 ; } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . asyncIterator ] : 0 } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : ( ) => { throw 0 ; } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : ( ) => { try { } catch { } } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : async function ( ) { } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : async x => 0 } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : { x } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 . x . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield new 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield x [ 0 ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ x , , yield * '' , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ x ??= 0 , , yield * 0 , ] ; } } , ] ) ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * ! 0 ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * '' ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * 0 . x ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * 0 ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * [ 0 ] ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * [ [ ] ] ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * [ ] ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * new . target [ 0 ] ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * null ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * x ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield * yield ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield 0 + 0 - 0 ** ~ 0 ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield 0 . x ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield 0 ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield [ ] ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield new 0 ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { return import ( yield * { [ yield * [ , yield x ] ] : x } ) ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * ! 0 ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * 0 . x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * 0 ?. x . x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * 0 ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * 0n ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * [ 0 ] ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * [ [ ] ] ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * [ ] ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * `` ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * null ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * yield ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * { [ Symbol . asyncIterator ] : null } ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield * { [ Symbol . iterator ] : function * ( x ) { } } ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield 0 . x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield 0 ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield [ 0 , ] [ 0 ] ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield x . x ] ; class x { } } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield x . x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield x ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield yield ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield { then : function ( x ) { } } ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ 0 , , yield { } ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * 0 % [ { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } , , yield * `` ] ; } } ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { throw yield * { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } % [ 0 , , yield * `` ] ; } } ; 
