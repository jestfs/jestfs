def <CONC>:DeclarativeEnvironmentRecord.SetMutableBinding(
  envRec: DeclarativeEnvironmentRecord,
  N: String,
  V: ESValue,
  S: Boolean
): Normal[Const[~unused~]] | Abrupt {
  let binding = envRec.SubMap[N]

  // 1. [id="step-setmutablebinding-missing-binding"] If _envRec_ does not have a binding for _N_, then
  if (= binding absent) {
    // 1. If _S_ is *true*, throw a *ReferenceError* exception.
    if (= S true) {
      return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%ReferenceError.prototype%"], "ErrorData" -> undefined)))
    } else {}

    // 1. Perform _envRec_.CreateMutableBinding(_N_, *true*).
    method-call %0 = envRec->CreateMutableBinding(N, true)

    // 1. Perform _envRec_.InitializeBinding(_N_, _V_).
    method-call %1 = envRec->InitializeBinding(N, V)

    // 1. Return NormalCompletion(~empty~).
    call %2 = clo<NormalCompletion>(~unused~)
    return %2
  } else {}

  // 1. If the binding for _N_ in _envRec_ is a strict binding, set _S_ to *true*.
  if (= binding.strict true) S = true else {}

  // 1. If the binding for _N_ in _envRec_ has not yet been initialized, throw a *ReferenceError* exception.
  if (! binding.initialized) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%ReferenceError.prototype%"], "ErrorData" -> undefined)))
  } 
  // 1. Else if the binding for _N_ in _envRec_ is a mutable binding, change its bound value to _V_.
  else if (? binding: "MutableBinding") {
    binding.BoundValue = V
  } 
  // 1. Else,
  else {
    // 1. Assert: This is an attempt to change the value of an immutable binding.
    assert (? binding: "ImmutableBinding")

    // 1. If _S_ is *true*, throw a *TypeError* exception.
    if (= S true) {
      return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined)))
    } else {}
  }

  // 1. Return NormalCompletion(~empty~).
  call %3 = clo<NormalCompletion>(~unused~)
  return %3
}
